{
  "hash": "aaba33dc8fb444b96ddfb289f84254a8",
  "result": {
    "markdown": "---\ntitle: \"Practical applications of learned concepts in R\"\nformat: \n  html:\n    code-fold: false\n    code-tools: true\nbibliography: references.bib\neditor: visual\n---\n\n\n## Network learning and analysis\n\nHere, we learn how a microbial association network is constructed and analyzed using the R package NetCoMi.\n\n::: {.callout-tip collapse=\"false\"}\n### The R package NetCoMi\n\nThe [NetCoMi](https://github.com/stefpeschel/NetCoMi) [@peschel2021netcomi] package is specifically designed to **construct, analyze, and compare networks** for microbiome data. It implements the complete workflow of learning and analyzing microbial networks explained in lecture 8. Instead of using several functions for each of the steps, `NetCoMi` provides a single function for network construction (`netConstruct()`), so the package streamlines the workflow considerably. The user can choose from a variety of methods for **data preprocessing, association estimation, sparsification, and transformation**. The returned `microNet` object can then be passed to `netAnalyze()` (the network analysis function) so that all necessary information is available for the network analysis workflow.\n:::\n\n### Install and load packages\n\nWe start by installing NetCoMi from GitHub. Two of NetCoMi's dependencies are also only available on GitHub. We will install them manually beforehand to avoid problems.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndevtools::install_github(\"zdk123/SpiecEasi\")\n\ndevtools::install_github(\"GraceYoon/SPRING\")\n\ndevtools::install_github(\"stefpeschel/NetCoMi\", force = TRUE, ref = \"TSE\",\n                         dependencies = c(\"Depends\", \"Imports\", \"LinkingTo\"),\n                         repos = c(\"https://cloud.r-project.org/\",\n                                   BiocManager::repositories()))\n```\n:::\n\n\nLoad packages needed in this exercise.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(NetCoMi)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: SpiecEasi\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\n```\n:::\n\n```{.r .cell-code}\nlibrary(phyloseq)\n```\n:::\n\n\n### Load the data\n\nThe 88 soil dataset [@lauber2009pyrosequencing] is again used in this example.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsoil <- readRDS(\"data/soil_processed/soil.RDS\")\n```\n:::\n\n\nTake a look at the data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsoil\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nphyloseq-class experiment-level object\notu_table()   OTU Table:         [ 116 taxa and 89 samples ]\nsample_data() Sample Data:       [ 89 samples by 1 sample variables ]\ntax_table()   Taxonomy Table:    [ 116 taxa by 7 taxonomic ranks ]\n```\n:::\n\n```{.r .cell-code}\n# Read count table\notu_table(soil)[1:10, 1:6]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nOTU Table:          [6 taxa and 10 samples]\n                     taxa are columns\n        1124701 697997 203969 205391 843189 3431064\n103.CA2      15      2      0      0      0       3\n103.CO3      14      4      0      0      0       1\n103.SR3       1      0      0      0      0       1\n103.IE2       8      0      0      1      0       0\n103.BP1      13     67      0      0      0       3\n103.VC2       7      0      0      1      0       7\n103.SA2       6      1      0      0      0       0\n103.GB2       3      3      0      0      0       0\n103.CO2       2      0      0      1      0       5\n103.KP1       2      1      0      0      0       1\n```\n:::\n\n```{.r .cell-code}\n# Taxonomy table\ntaxtab <- tax_table(soil)\nhead(taxtab)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTaxonomy Table:     [6 taxa by 7 taxonomic ranks]:\n        Kingdom       Phylum                Class                    \n1124701 \"k__Bacteria\" \"p__Bacteroidetes\"    \"c__[Saprospirae]\"       \n697997  \"k__Bacteria\" \"p__Acidobacteria\"    \"c__[Chloracidobacteria]\"\n203969  \"k__Bacteria\" \"p__Acidobacteria\"    \"c__DA052\"               \n205391  \"k__Bacteria\" \"p__Acidobacteria\"    \"c__Solibacteres\"        \n843189  \"k__Bacteria\" \"p__Acidobacteria\"    \"c__Solibacteres\"        \n3431064 \"k__Bacteria\" \"p__Gemmatimonadetes\" \"c__Gemmatimonadetes\"    \n        Order                Family                Genus                     \n1124701 \"o__[Saprospirales]\" \"f__Chitinophagaceae\" \"g__\"                     \n697997  \"o__RB41\"            \"f__\"                 \"g__\"                     \n203969  \"o__Ellin6513\"       \"f__\"                 \"g__\"                     \n205391  \"o__Solibacterales\"  \"f__\"                 \"g__\"                     \n843189  \"o__Solibacterales\"  \"f__Solibacteraceae\"  \"g__Candidatus Solibacter\"\n3431064 \"o__N1423WL\"         \"f__\"                 \"g__\"                     \n        Species\n1124701 \"s__\"  \n697997  \"s__\"  \n203969  \"s__\"  \n205391  \"s__\"  \n843189  \"s__\"  \n3431064 \"s__\"  \n```\n:::\n\n```{.r .cell-code}\n# Sample data\nsampdata <- sample_data(soil)\nhead(sampdata)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          ph\n103.CA2 8.02\n103.CO3 6.02\n103.SR3 6.95\n103.IE2 5.52\n103.BP1 7.53\n103.VC2 5.99\n```\n:::\n:::\n\n\n### Rename genera\n\nIf we want to generate a network on genus level, we run into two problems:\n\n-   There are unidentified genera.\n-   Not all genera are unique.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(taxtab[, \"Genus\"])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n                     g__              g__Bacillus           g__Balneimonas \n                      83                        1                        4 \n       g__Bradyrhizobium          g__Burkholderia g__Candidatus Solibacter \n                       4                        1                        2 \n         g__Edaphobacter        g__Flavobacterium           g__Gallionella \n                       1                        1                        1 \n     g__Geodermatophilus          g__Kaistobacter         g__Mycobacterium \n                       1                        1                        1 \n           g__Phormidium        g__Planomicrobium           g__Rhodoplanes \n                       1                        1                        8 \n          g__Rubrobacter          g__Sporosarcina \n                       4                        1 \n```\n:::\n:::\n\n\nSolutions:\n\n-   Unknown genera are named by higher taxonomic ranks.\n-   Duplicates are numbered to make them unique.\n\nNetCoMi provides a function `renameTaxa()`, which does this job for us. It can also be used to rename the taxa according to a desired pattern.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Rename taxonomic table and make Rank6 (genus) unique\nsoil_renamed <- renameTaxa(soil, \n                           pat = \"<name>\", \n                           substPat = \"<name>_<subst_name>(<subst_R>)\",\n                           numDupli = \"Genus\")\n\ntaxtab_renamed <- tax_table(soil_renamed)\n\nhead(cbind(taxtab[, \"Genus\"], taxtab_renamed[, \"Genus\"]), 15)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        Genus                      Genus                   \n1124701 \"g__\"                      \"1_Chitinophagaceae(F)\" \n697997  \"g__\"                      \"2_RB41(O)\"             \n203969  \"g__\"                      \"3_Ellin6513(O)\"        \n205391  \"g__\"                      \"4_Solibacterales(O)\"   \n843189  \"g__Candidatus Solibacter\" \"Candidatus Solibacter1\"\n3431064 \"g__\"                      \"5_N1423WL(O)\"          \n156611  \"g__\"                      \"6_Acidobacteriaceae(F)\"\n2867534 \"g__Candidatus Solibacter\" \"Candidatus Solibacter2\"\n4440638 \"g__\"                      \"7_RB41(O)\"             \n216549  \"g__\"                      \"8_RB41(O)\"             \n4440611 \"g__\"                      \"9_RB41(O)\"             \n4416927 \"g__Balneimonas\"           \"Balneimonas1\"          \n2578357 \"g__\"                      \"10_Ellin6513(O)\"       \n1122202 \"g__\"                      \"11_RB41(O)\"            \n3616127 \"g__\"                      \"12_Solibacterales(O)\"  \n```\n:::\n:::\n\n\nNow, we can pass the phyloseq object with renamed genera to NetCoMi's `netConstruct()` function.\n\nSpiecEasi is used in the \"MB\" mode (Meinshausen & BÃ¼hlman neighborhood selection) to measure associations between the genera.\n\nA few comments on the arguments:\n\n-   The network is created on genus level.\n-   The data are filtered as follows:\n    -   Only samples with a total of at least 100 reads are included (argument `filtSamp`).\n    -   Only taxa occuring in at least 5 samples are included (argument `filtTax`).\n-   `measure` defines the association or dissimilarity measure, in our case SpiecEasi. Additional arguments are passed to `spiec.easi()` via `measurePar`. We reduce the number of StARS repetitions to 10 to reduce runtime.\n-   Normalization and zero handling is done internally by `spiec.easi()`, so we set `normMethod` and `zeroMethod` to \"none\".\n-   `sparsMethod` is also set to \"none\" (SpiecEasi includes StARS model selection to obtain a sparse network).\n-   The \"signed\" method is used to transform associations into dissimilarities (argument `dissFunc`). Thus, strongly negatively associated taxa have a high dissimilarity and conversely a low similarity, corresponding to low edge weights on the network plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnet <- netConstruct(soil_renamed,\n                    taxRank = \"Genus\",\n                    filtSamp = \"totalReads\",\n                    filtSampPar = list(totalReads = 100),\n                    filtTax = \"numbSamp\",\n                    filtTaxPar = list(numbSamp = 5),\n                    measure = \"spieceasi\",\n                    measurePar = list(method = \"mb\",\n                                      pulsar.params = list(rep.num = 10)),\n                    zeroMethod = \"none\",\n                    normMethod = \"none\",\n                    sparsMethod = \"none\", \n                    dissFunc = \"signed\",\n                    verbose = 3,\n                    seed = 12345)\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n`netConstruct()` returns an object of the class `microNet`, which contains all matrices generated during network construction.\n\nThe object also contains an edge list, giving each edge's estimated association, dissimilarity, and adjacency. Let's take a quick look at the edges with the highest and lowest edge weights:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nedgelist <- net$edgelist1[order(net$edgelist1$adja, decreasing = TRUE), ]\nhead(edgelist)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                            v1                    v2      asso      diss\n210 64_Syntrophobacteraceae(F)            73_PK29(O) 0.3597096 0.5658138\n190                 50_RB41(O)            69_RB41(O) 0.3587220 0.5662499\n196                 54_RB41(O)            82_RB41(O) 0.3560518 0.5674276\n178            43_Ellin6513(O)       55_Ellin6513(O) 0.3485638 0.5707172\n112      24_Sinobacteraceae(F) 68_Koribacteraceae(F) 0.3238421 0.5814456\n2        1_Chitinophagaceae(F)             9_RB41(O) 0.3000597 0.5915827\n         adja\n210 0.4341862\n190 0.4337501\n196 0.4325724\n178 0.4292828\n112 0.4185544\n2   0.4084173\n```\n:::\n\n```{.r .cell-code}\ntail(edgelist)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                         v1                      v2         asso      diss\n129   30_Sinobacteraceae(F)   35_Sinobacteraceae(F) -0.009823811 0.7105715\n193            Kaistobacter   75_Koribacteraceae(F) -0.010324659 0.7107477\n35                8_RB41(O) 33_Rhodospirillaceae(F) -0.010716865 0.7108857\n113 25_Rhodospirillaceae(F)   34_Koribacteraceae(F) -0.011317239 0.7110968\n99  22_Bradyrhizobiaceae(F)            Rubrobacter3 -0.013935976 0.7120168\n9            3_Ellin6513(O)         Bradyrhizobium4 -0.030935464 0.7179608\n         adja\n129 0.2894285\n193 0.2892523\n35  0.2891143\n113 0.2889032\n99  0.2879832\n9   0.2820392\n```\n:::\n:::\n\n\n### Network analysis\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnetprops <- netAnalyze(net, \n                       clustMethod = \"cluster_fast_greedy\",\n                       hubPar = \"eigenvector\",\n                       normDeg = FALSE,\n                       gcmHeat = FALSE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(netprops)\n```\n\n::: {.cell-output .cell-output-stdout}\n`````````````````````````````````````````````````\n\nComponent sizes\n```````````````           \nsize: 111 1\n   #:   1 3\n______________________________\nGlobal network properties\n`````````````````````````\nLargest connected component (LCC):\n                                 \nRelative LCC size         0.97368\nClustering coefficient    0.21135\nModularity                0.61887\nPositive edge percentage 95.41284\nEdge density              0.03571\nNatural connectivity      0.01144\nVertex connectivity       1.00000\nEdge connectivity         1.00000\nAverage dissimilarity*    0.98851\nAverage path length**     2.89288\n\nWhole network:\n                                 \nNumber of components      4.00000\nClustering coefficient    0.21135\nModularity                0.61887\nPositive edge percentage 95.41284\nEdge density              0.03385\nNatural connectivity      0.01108\n-----\n*: Dissimilarity = 1 - edge weight\n**: Path length = Units with average dissimilarity\n\n______________________________\nClusters\n- In the whole network\n- Algorithm: cluster_fast_greedy\n```````````````````````````````` \n                           \nname: 0  1  2  3  4  5  6 7\n   #: 3 19 31 18 10 16 14 3\n\n______________________________\nHubs\n- In alphabetical/numerical order\n- Based on empirical quantiles of centralities\n```````````````````````````````````````````````                      \n 12_Solibacterales(O) \n 34_Koribacteraceae(F)\n 42_Ellin6513(O)      \n 61_Koribacteraceae(F)\n 72_Koribacteraceae(F)\n 75_Koribacteraceae(F)\n\n______________________________\nCentrality measures\n- In decreasing order\n- Centrality of disconnected components is zero\n````````````````````````````````````````````````\nDegree (unnormalized):\n                          \n75_Koribacteraceae(F)   11\n68_Koribacteraceae(F)   10\n17_RB41(O)               9\n30_Sinobacteraceae(F)    8\n33_Rhodospirillaceae(F)  8\n34_Koribacteraceae(F)    8\n42_Ellin6513(O)          8\n61_Koribacteraceae(F)    8\n12_Solibacterales(O)     7\n16_Ellin6513(O)          7\n\nBetweenness centrality (normalized):\n                               \n33_Rhodospirillaceae(F) 0.18098\n30_Sinobacteraceae(F)   0.15913\n50_RB41(O)              0.13044\n75_Koribacteraceae(F)   0.12811\n12_Solibacterales(O)    0.11526\n42_Ellin6513(O)         0.10726\n17_RB41(O)              0.10492\n68_Koribacteraceae(F)   0.10392\nRubrobacter3            0.09958\n35_Sinobacteraceae(F)   0.09358\n\nCloseness centrality (normalized):\n                               \n75_Koribacteraceae(F)   0.56896\n12_Solibacterales(O)    0.56828\n33_Rhodospirillaceae(F) 0.56453\n30_Sinobacteraceae(F)   0.56001\n42_Ellin6513(O)         0.54787\n17_RB41(O)              0.52447\n50_RB41(O)              0.51804\n61_Koribacteraceae(F)   0.51734\n34_Koribacteraceae(F)   0.50888\n56_Solibacterales(O)    0.50290\n\nEigenvector centrality (normalized):\n                               \n75_Koribacteraceae(F)   1.00000\n12_Solibacterales(O)    0.72317\n72_Koribacteraceae(F)   0.70549\n34_Koribacteraceae(F)   0.70273\n42_Ellin6513(O)         0.70056\n61_Koribacteraceae(F)   0.64929\n56_Solibacterales(O)    0.57609\n16_Ellin6513(O)         0.55649\n33_Rhodospirillaceae(F) 0.50822\n68_Koribacteraceae(F)   0.49436\n`````````````````````````````````````````````````\n:::\n:::\n\n\n### Highlight node properties\n\nIn the first plot, node colors represent the detected clusters and node sizes are scaled by eigenvector centrality. Hub nodes are highlighted by default. Singletons are not included in the plot. To improve the readability, NetCoMi's \"intelligent\" label shortening approach is used.\n\nNote that nodes are sometimes placed too close together so that the labels overlap. You may need to play around with the repulsion argument until you find a value where the labels are legible, but also the clusters are still well recognizable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(netprops,\n     repulsion = 0.95,\n     rmSingles = TRUE,\n     shortenLabels = \"none\",\n     labelScale = TRUE,\n     nodeSize = \"eigenvector\",\n     nodeSizeSpread = 3,\n     nodeColor = \"cluster\", \n     hubBorderCol = \"gray40\",\n     cexNodes = 1.8,\n     cexLabels = 3,\n     edgeTranspHigh = 20,\n     title1 = \"Network properties highlighted\", \n     showTitle = TRUE,\n     cexTitle = 2.3,\n     mar = c(1, 3, 4, 8))\n\nlegend(0.7, 1.1, cex = 1.7, title = \"estimated correlation:\",\n       legend = c(\"+\",\"-\"), lty = 1, lwd = 3, col = c(\"#009900\",\"red\"), \n       bty = \"n\", horiz = TRUE)\n```\n\n::: {.cell-output-display}\n![](8_practical_networks_files/figure-html/network_plot_single_cluster-1.png){width=1248}\n:::\n:::\n\n\n### Highlight data features\n\nWe now color nodes according to their phylum. The node sizes are proportional to a taxon's sum of mclr-transformed abundances. As already mentioned in Section \\@ref(spring-network), this is the normalization method used by `SPRING`. A color palette from `RColorBrewer` is used here.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Generate vector with phylum names for node coloring\nphyla <- as.factor(taxtab_renamed[, \"Phylum\"])\nnames(phyla) <- taxtab_renamed[, \"Genus\"]\n\n# Reorder levels\nphyla <- reorder(phyla, phyla, FUN = length, decreasing = TRUE)\n\n# Create color vector\ncolvec <- rainbow(length(levels(phyla)))\n\nplot(netprops,\n     repulsion = 0.95,\n     rmSingles = TRUE,\n     shortenLabels = \"none\",\n     labelScale = TRUE,\n     nodeSize = \"clr\",\n     nodeColor = \"feature\", \n     featVecCol = phyla, \n     colorVec =  colvec,\n     #nodeTransp = 20,\n     highlightHubs = FALSE,\n     cexNodes = 1.2,\n          cexLabels = 3,\n     edgeTranspHigh = 20,\n     title1 = \"Data features highlighted\", \n     showTitle = TRUE,\n     cexTitle = 2.3,\n     mar = c(1, 10, 4, 6))\n\n# Add legends\nlegend(0.7, 1.1, cex = 1.7, title = \"estimated correlation:\",\n       legend = c(\"+\",\"-\"), lty = 1, lwd = 3, col = c(\"#009900\",\"red\"), \n       bty = \"n\", horiz = TRUE)\n\n# Colors used in the legend should be equally transparent as in the plot\ncol_transp <- colToTransp(colvec, 60)\n\nlegend(-1.8, 1.1, cex = 1.7, pt.cex = 2.5, title = \"Phylum:\", \n       legend=levels(phyla), col = col_transp, bty = \"n\", pch = 16) \n```\n\n::: {.cell-output-display}\n![](8_practical_networks_files/figure-html/network_plot_single_phylum-1.png){width=1440}\n:::\n:::\n\n\nSelect Proteobacteria\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsel <- names(phyla[phyla == \"Proteobacteria\"])\nsel <- sel[sel %in% colnames(net$adjaMat1)]\n\nplot(netprops,\n          nodeFilter = \"names\",\n     nodeFilterPar = sel,\n     repulsion = 0.95,\n     rmSingles = TRUE,\n     shortenLabels = \"none\",\n     labelScale = TRUE,\n     nodeSize = \"eigenvector\",\n     nodeSizeSpread = 3,\n     nodeColor = \"cluster\", \n     hubBorderCol = \"gray40\",\n     cexNodes = 1.8,\n     cexLabels = 3,\n     edgeTranspHigh = 20,\n     title1 = \"Network properties highlighted\", \n     showTitle = TRUE,\n     cexTitle = 2.3,\n     mar = c(1, 3, 4, 8))\n\nlegend(0.7, 1.1, cex = 1.7, title = \"estimated correlation:\",\n       legend = c(\"+\",\"-\"), lty = 1, lwd = 3, col = c(\"#009900\",\"red\"), \n       bty = \"n\", horiz = TRUE)\n```\n\n::: {.cell-output-display}\n![](8_practical_networks_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "8_practical_networks_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}