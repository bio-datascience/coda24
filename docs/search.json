[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Mini-course compositional data analysis 2024",
    "section": "",
    "text": "Date: Jan 9-10 2024\nRoom: Location TBA\nInstructors: Christian L. Müller, Stefanie Peschel, Viet Tran\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome!\n\nThe goal of the workshop is to help participants understand and apply concepts of compositional data analysis\nWorkshop material can be found in the workshop github repository (TBA).\n\n\nLearning Objectives\nAt the end of the course, participants will be able to\n\nunderstand key concepts of compositional data analysis\napply concepts of compositional data analysis in R\n\n\n\nPre-requisites\n\nBasic familiarity with R (e.g., tutorial R for ecology)\n\n\n\n\nSchedule\nTuesday\n\n\n\n\n\n\n\n\nTime\nTopic\nPresenter\n\n\n\n\n9:00 - 10:00\nSession 1: Intro to compositional sequencing data\nInstructor CLM\n\n\n10:15 - 11:00\nPresentation of student data (fast track)\nall\n\n\n11:15 - 12:00\nSession 2: Principles of compositional data\nInstructor CLM\n\n\n12:00 - 13:00\nLunch break\nall\n\n\n13:00 - 14:00\nSession 3: Exploratory analysis of compositional data in R (part I)\nInstructor CLM, VT\n\n\n14:15 - 15:15\nSession 4: Exploratory analysis of compositional data in R (part II)\nInstructor CLM, SP\n\n\n15:15 - 15:45\nFika\nall\n\n\n15:45 - 17:00\nSession 5: Differential abundance testing and regression\nInstructor CLM, VT\n\n\n17:00 - open end\nApplication to own data\nall\n\n\n\nWednesday\n\n\n\n\n\n\n\n\nTime\nTopic\nPresenter\n\n\n\n\n9:00 - 09:30\nRecap and open issues\nInstructor CLM\n\n\n9:45 - 10:45\nSession 6: Regression analysis for compositional data\nInstructor CLM, VT\n\n\n11:00 - 12:00\nSession 7: Estimating microbial association networks\nInstructor CLM, SP\n\n\n12:00 - 13:00\nLunch break\nall\n\n\n13:00 - 13:30\nSession 8: Practical applications of learned concepts in R (regression)\nInstructor SP, VT\n\n\n13:30 - 14:00\nSession 8: Practical applications of learned concepts in R (networks)\nInstructor SP, VT\n\n\n14:15 - 15:15\nSession 9: Time series analysis for compositional data\nInstructor CLM\n\n\n15:15 - 15:45\nFika\nall\n\n\n15:45 - 16:15\nSession 10: Recap and further topics\nInstructor CLM\n\n\n16:15 - open end\nApplication to own data\nall\n\n\n\n\n\nAdditional material\n\nConstruct the soil phyloseq object\n\nWebsite created with the qtwAcademic template based on quarto."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "In the hands-on tutorial, we will use R.\n\nContact\nChristian L. Müller\nStefanie Peschel\nViet Tran: viet dot tran at campus.lmu.de"
  },
  {
    "objectID": "part_1_prep.html",
    "href": "part_1_prep.html",
    "title": "Preparation",
    "section": "",
    "text": "Page without code\n\n\n\nThis page contains an example for some structured preparation information for a workshop. No code is executed here.\nHere are some preparation information for the participants."
  },
  {
    "objectID": "part_1_prep.html#software",
    "href": "part_1_prep.html#software",
    "title": "Preparation",
    "section": "Software",
    "text": "Software\nIn this workshop we will be using R. You can either\n\nhave R and Rstudio installed on your laptop\nor, use Posit cloud (formerly Rstudio Cloud).\n\nPosit cloud is free of charge for personal users, yet you need to sign up for a new user account and have internet connection.\nThe R package we are using is glmnet."
  },
  {
    "objectID": "part_1_prep.html#data",
    "href": "part_1_prep.html#data",
    "title": "Preparation",
    "section": "Data",
    "text": "Data\nThe datasets we use can be found here (insert link)."
  },
  {
    "objectID": "part_1_prep.html#code",
    "href": "part_1_prep.html#code",
    "title": "Preparation",
    "section": "Code",
    "text": "Code\nThe R scripts used in part 1 and part 2 can be found here (insert link)."
  },
  {
    "objectID": "part_1_prep.html#resources",
    "href": "part_1_prep.html#resources",
    "title": "Preparation",
    "section": "Resources",
    "text": "Resources\nLecture notes (insert link)\nLab notes (insert link)"
  },
  {
    "objectID": "part_2_eda.html",
    "href": "part_2_eda.html",
    "title": "Part I",
    "section": "",
    "text": "Page with R code\n\n\n\nThis page contains an example template for a lab session, where R code and results are displayed here.\nYou can find more information on how to include code in Quarto website here.\nYou can experiment with code-fold and code-tools in the yaml header above to change how the code cells look like."
  },
  {
    "objectID": "part_2_eda.html#a-cancer-modeling-example",
    "href": "part_2_eda.html#a-cancer-modeling-example",
    "title": "Part I",
    "section": "A Cancer Modeling Example",
    "text": "A Cancer Modeling Example\nExercise on analysis of miRNA, mRNA and protein data from the paper Aure et al, Integrated analysis reveals microRNA networks coordinately expressed with key proteins in breast cancer, Genome Medicine, 2015.\nPlease run the code provided to replicate some of the analyses. Make sure you can explain what all the analysis steps do and that you understand all the results.\nIn addition, there are some extra tasks (Task 1), where no R code is provided. Please do these tasks when you have time available at the end of the lab.\n\nLoad the data\nRead the data, and convert to matrix format.\n\nmrna <- read.table(\"data/data_example.txt\", header=T, sep=\"\\t\", dec=\".\")\n\n# Convert to matrix format\n\nmrna <- as.matrix(mrna)\n\nPrint the data\n\nmrna[1:4, 1:4]\n\n      OSL2R.3002T4 OSL2R.3005T1 OSL2R.3013T1 OSL2R.3030T2\nACACA      1.60034     -0.49087     -0.26553     -0.27857\nANXA1     -2.42501     -0.05416     -0.46478     -2.18393\nAR         0.39615     -0.43348     -0.10232      0.58299\nBAK1       0.78627      0.39897      0.22598     -1.31202\n\n\nVisualise the overall distribution of expression levels by histogram\n\nhist(mrna, nclass=40, xlim=c(-5,5), col=\"lightblue\")\n\n\n\n\n\n\n\n\n\n\nTask 1\n\n\n\nThis is a callout-note, and it can be quite useful for exercises. You can find more about callout here.\nExample: Extend the above analysis to cover all genes."
  },
  {
    "objectID": "1_intro.html",
    "href": "1_intro.html",
    "title": "Intro to compositional sequencing data",
    "section": "",
    "text": "Page without code\n\n\n\nThis page contains an example for some structured preparation information for a workshop. No code is executed here.\nHere are some preparation information for the participants."
  },
  {
    "objectID": "1_intro.html#software",
    "href": "1_intro.html#software",
    "title": "Intro to compositional sequencing data",
    "section": "Software",
    "text": "Software\nIn this workshop we will be using R. You can either\n\nhave R and Rstudio installed on your laptop\nor, use Posit cloud (formerly Rstudio Cloud).\n\nPosit cloud is free of charge for personal users, yet you need to sign up for a new user account and have internet connection.\nThe R package we are using is glmnet."
  },
  {
    "objectID": "1_intro.html#data",
    "href": "1_intro.html#data",
    "title": "Intro to compositional sequencing data",
    "section": "Data",
    "text": "Data\nThe datasets we use can be found here (insert link)."
  },
  {
    "objectID": "1_intro.html#code",
    "href": "1_intro.html#code",
    "title": "Intro to compositional sequencing data",
    "section": "Code",
    "text": "Code\nThe R scripts used in part 1 and part 2 can be found here (insert link)."
  },
  {
    "objectID": "1_intro.html#resources",
    "href": "1_intro.html#resources",
    "title": "Intro to compositional sequencing data",
    "section": "Resources",
    "text": "Resources\nLecture notes (insert link)\nLab notes (insert link)"
  },
  {
    "objectID": "2_principle.html",
    "href": "2_principle.html",
    "title": "Principles of compositional data",
    "section": "",
    "text": "TBD\nPlease run the code provided to replicate some of the analyses. Make sure you can explain what all the analysis steps do and that you understand all the results.\nIn addition, there are some extra tasks (Task 1), where no R code is provided. Please do these tasks when you have time available at the end of the lab.\n\n\nRead the data, and convert to matrix format.\n\nmrna &lt;- read.table(\"data/data_example.txt\", header=T, sep=\"\\t\", dec=\".\")\n\n# Convert to matrix format\n\nmrna &lt;- as.matrix(mrna)\n\nPrint the data\n\nmrna[1:4, 1:4]\n\n      OSL2R.3002T4 OSL2R.3005T1 OSL2R.3013T1 OSL2R.3030T2\nACACA      1.60034     -0.49087     -0.26553     -0.27857\nANXA1     -2.42501     -0.05416     -0.46478     -2.18393\nAR         0.39615     -0.43348     -0.10232      0.58299\nBAK1       0.78627      0.39897      0.22598     -1.31202\n\n\nVisualize the overall distribution of expression levels by histogram\n\nhist(mrna, nclass=40, xlim=c(-5,5), col=\"lightblue\")\n\n\n\n\n\n\n\n\n\n\nTask 1\n\n\n\nThis is a callout-note, and it can be quite useful for exercises. You can find more about callout here.\nExample: Extend the above analysis to cover all genes."
  },
  {
    "objectID": "2_principle.html#a-cancer-modeling-example",
    "href": "2_principle.html#a-cancer-modeling-example",
    "title": "Principles of compositional data",
    "section": "A Cancer Modeling Example",
    "text": "A Cancer Modeling Example\nExercise on analysis of miRNA, mRNA and protein data from the paper Aure et al, Integrated analysis reveals microRNA networks coordinately expressed with key proteins in breast cancer, Genome Medicine, 2015.\nPlease run the code provided to replicate some of the analyses. Make sure you can explain what all the analysis steps do and that you understand all the results.\nIn addition, there are some extra tasks (Task 1), where no R code is provided. Please do these tasks when you have time available at the end of the lab.\n\nLoad the data\nRead the data, and convert to matrix format.\n\nmrna &lt;- read.table(\"data/data_example.txt\", header=T, sep=\"\\t\", dec=\".\")\n\n# Convert to matrix format\n\nmrna &lt;- as.matrix(mrna)\n\nPrint the data\n\nmrna[1:4, 1:4]\n\n      OSL2R.3002T4 OSL2R.3005T1 OSL2R.3013T1 OSL2R.3030T2\nACACA      1.60034     -0.49087     -0.26553     -0.27857\nANXA1     -2.42501     -0.05416     -0.46478     -2.18393\nAR         0.39615     -0.43348     -0.10232      0.58299\nBAK1       0.78627      0.39897      0.22598     -1.31202\n\n\nVisualise the overall distribution of expression levels by histogram\n\nhist(mrna, nclass=40, xlim=c(-5,5), col=\"lightblue\")\n\n\n\n\n\n\n\n\n\n\nTask 1\n\n\n\nThis is a callout-note, and it can be quite useful for exercises. You can find more about callout here.\nExample: Extend the above analysis to cover all genes."
  },
  {
    "objectID": "2_principle.html#example",
    "href": "2_principle.html#example",
    "title": "Principles of compositional data",
    "section": "",
    "text": "TBD\nPlease run the code provided to replicate some of the analyses. Make sure you can explain what all the analysis steps do and that you understand all the results.\nIn addition, there are some extra tasks (Task 1), where no R code is provided. Please do these tasks when you have time available at the end of the lab.\n\n\nRead the data, and convert to matrix format.\n\nmrna &lt;- read.table(\"data/data_example.txt\", header=T, sep=\"\\t\", dec=\".\")\n\n# Convert to matrix format\n\nmrna &lt;- as.matrix(mrna)\n\nPrint the data\n\nmrna[1:4, 1:4]\n\n      OSL2R.3002T4 OSL2R.3005T1 OSL2R.3013T1 OSL2R.3030T2\nACACA      1.60034     -0.49087     -0.26553     -0.27857\nANXA1     -2.42501     -0.05416     -0.46478     -2.18393\nAR         0.39615     -0.43348     -0.10232      0.58299\nBAK1       0.78627      0.39897      0.22598     -1.31202\n\n\nVisualize the overall distribution of expression levels by histogram\n\nhist(mrna, nclass=40, xlim=c(-5,5), col=\"lightblue\")\n\n\n\n\n\n\n\n\n\n\nTask 1\n\n\n\nThis is a callout-note, and it can be quite useful for exercises. You can find more about callout here.\nExample: Extend the above analysis to cover all genes."
  },
  {
    "objectID": "4_eda.html",
    "href": "4_eda.html",
    "title": "Exploratory data analysis of compositional data",
    "section": "",
    "text": "TBD\nPlease run the code provided to replicate some of the analyses. Make sure you can explain what all the analysis steps do and that you understand all the results.\nIn addition, there are some extra tasks (Task 1), where no R code is provided. Please do these tasks when you have time available at the end of the lab.\n\n\nRead the data, and convert to matrix format.\n\nmrna &lt;- read.table(\"data/data_example.txt\", header=T, sep=\"\\t\", dec=\".\")\n\n# Convert to matrix format\n\nmrna &lt;- as.matrix(mrna)\n\nPrint the data\n\nmrna[1:4, 1:4]\n\n      OSL2R.3002T4 OSL2R.3005T1 OSL2R.3013T1 OSL2R.3030T2\nACACA      1.60034     -0.49087     -0.26553     -0.27857\nANXA1     -2.42501     -0.05416     -0.46478     -2.18393\nAR         0.39615     -0.43348     -0.10232      0.58299\nBAK1       0.78627      0.39897      0.22598     -1.31202\n\n\nVisualize the overall distribution of expression levels by histogram\n\nhist(mrna, nclass=40, xlim=c(-5,5), col=\"lightblue\")\n\n\n\n\n\n\n\n\n\n\nTask 1\n\n\n\nThis is a callout-note, and it can be quite useful for exercises. You can find more about callout here.\nExample: Extend the above analysis to cover all genes."
  },
  {
    "objectID": "4_eda.html#example",
    "href": "4_eda.html#example",
    "title": "Exploratory data analysis of compositional data",
    "section": "",
    "text": "TBD\nPlease run the code provided to replicate some of the analyses. Make sure you can explain what all the analysis steps do and that you understand all the results.\nIn addition, there are some extra tasks (Task 1), where no R code is provided. Please do these tasks when you have time available at the end of the lab.\n\n\nRead the data, and convert to matrix format.\n\nmrna &lt;- read.table(\"data/data_example.txt\", header=T, sep=\"\\t\", dec=\".\")\n\n# Convert to matrix format\n\nmrna &lt;- as.matrix(mrna)\n\nPrint the data\n\nmrna[1:4, 1:4]\n\n      OSL2R.3002T4 OSL2R.3005T1 OSL2R.3013T1 OSL2R.3030T2\nACACA      1.60034     -0.49087     -0.26553     -0.27857\nANXA1     -2.42501     -0.05416     -0.46478     -2.18393\nAR         0.39615     -0.43348     -0.10232      0.58299\nBAK1       0.78627      0.39897      0.22598     -1.31202\n\n\nVisualize the overall distribution of expression levels by histogram\n\nhist(mrna, nclass=40, xlim=c(-5,5), col=\"lightblue\")\n\n\n\n\n\n\n\n\n\n\nTask 1\n\n\n\nThis is a callout-note, and it can be quite useful for exercises. You can find more about callout here.\nExample: Extend the above analysis to cover all genes."
  },
  {
    "objectID": "9_practical.html",
    "href": "9_practical.html",
    "title": "Practical applications of learned concepts in R",
    "section": "",
    "text": "TBD\nPlease run the code provided to replicate some of the analyses. Make sure you can explain what all the analysis steps do and that you understand all the results.\nIn addition, there are some extra tasks (Task 1), where no R code is provided. Please do these tasks when you have time available at the end of the lab.\n\n\nRead the data, and convert to matrix format.\n\nmrna &lt;- read.table(\"data/data_example.txt\", header=T, sep=\"\\t\", dec=\".\")\n\n# Convert to matrix format\n\nmrna &lt;- as.matrix(mrna)\n\nPrint the data\n\nmrna[1:4, 1:4]\n\n      OSL2R.3002T4 OSL2R.3005T1 OSL2R.3013T1 OSL2R.3030T2\nACACA      1.60034     -0.49087     -0.26553     -0.27857\nANXA1     -2.42501     -0.05416     -0.46478     -2.18393\nAR         0.39615     -0.43348     -0.10232      0.58299\nBAK1       0.78627      0.39897      0.22598     -1.31202\n\n\nVisualize the overall distribution of expression levels by histogram\n\nhist(mrna, nclass=40, xlim=c(-5,5), col=\"lightblue\")\n\n\n\n\n\n\n\n\n\n\nTask 1\n\n\n\nThis is a callout-note, and it can be quite useful for exercises. You can find more about callout here.\nExample: Extend the above analysis to cover all genes."
  },
  {
    "objectID": "9_practical.html#example",
    "href": "9_practical.html#example",
    "title": "Practical applications of learned concepts in R",
    "section": "",
    "text": "TBD\nPlease run the code provided to replicate some of the analyses. Make sure you can explain what all the analysis steps do and that you understand all the results.\nIn addition, there are some extra tasks (Task 1), where no R code is provided. Please do these tasks when you have time available at the end of the lab.\n\n\nRead the data, and convert to matrix format.\n\nmrna &lt;- read.table(\"data/data_example.txt\", header=T, sep=\"\\t\", dec=\".\")\n\n# Convert to matrix format\n\nmrna &lt;- as.matrix(mrna)\n\nPrint the data\n\nmrna[1:4, 1:4]\n\n      OSL2R.3002T4 OSL2R.3005T1 OSL2R.3013T1 OSL2R.3030T2\nACACA      1.60034     -0.49087     -0.26553     -0.27857\nANXA1     -2.42501     -0.05416     -0.46478     -2.18393\nAR         0.39615     -0.43348     -0.10232      0.58299\nBAK1       0.78627      0.39897      0.22598     -1.31202\n\n\nVisualize the overall distribution of expression levels by histogram\n\nhist(mrna, nclass=40, xlim=c(-5,5), col=\"lightblue\")\n\n\n\n\n\n\n\n\n\n\nTask 1\n\n\n\nThis is a callout-note, and it can be quite useful for exercises. You can find more about callout here.\nExample: Extend the above analysis to cover all genes."
  },
  {
    "objectID": "90_soil_phyloseq.html",
    "href": "90_soil_phyloseq.html",
    "title": "Practical applications of learned concepts in R",
    "section": "",
    "text": "Here, we show how to construct the phyloseq object based on the taxonomic table, the ASV table, and the metadata. We use the 88 soil dataset (Lauber et al. 2009) obtained from the gglasso (Schaipp, Vlasovets, and Müller 2021) tutorial. The raw data can be downloaded from the GitHub repositories. According the to tutorial the data is already processed in the following way:\n\nFilter for OTUs with minimum abundance of \\(100\\) and\nadd pseudo-count of \\(1\\).\n\nData sources:\n\nTaxonomy: https://github.com/Vlasovets/GGLasso/blob/cfbf01535c88bbcd3ba60f24b5b867472d549f89/data/soil/original/88soils_taxonomy.txt\nOTU table: https://github.com/Vlasovets/GGLasso/blob/master/data/soil/processed/soil_116.csv\nMetadata: https://github.com/Vlasovets/GGLasso/blob/master/data/soil/processed/ph.csv\n\nA detailed tutorial on constructing a phyloseq object can be found on the official phyloseq website.\nWe will need 2 packages for analysis:\n\nphyloseq for the data structure and\ntidyverse for data wranging.\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.1     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(phyloseq)\n\n\n\nRead the different data tables.\n\n# The OTU table contains rownames in the column X\notu_raw &lt;- read.csv(\"./data/soil_raw/soil_116.csv\", header = TRUE, row.names = \"X\")\ntax_raw &lt;- read.table(\"./data/soil_raw/88soils_taxonomy.txt\", \n                      header = TRUE, sep = \"\\t\")\n# The ph data also contains rownames in X.SampleID\nph &lt;- read.csv(\"./data/soil_raw/ph.csv\", header = TRUE, row.names = \"X.SampleID\")\n\nPrint the data.\n\nhead(otu_raw[, 1:6])\n\n        X1124701 X697997 X203969 X205391 X843189 X3431064\n103.CA2       16       3       1       1       1        4\n103.CO3       15       5       1       1       1        2\n103.SR3        2       1       1       1       1        2\n103.IE2        9       1       1       2       1        1\n103.BP1       14      68       1       1       1        4\n103.VC2        8       1       1       2       1        8\n\n\nThe OTU data looks good, but we must fix the column names since they start with X.\n\nhead(tax_raw)\n\n  Feature.ID\n1    1000512\n2    1000547\n3    1000654\n4    1000757\n5    1000876\n6    1001333\n                                                                                                      Taxon\n1                     k__Bacteria;p__Actinobacteria;c__Thermoleophilia;o__Gaiellales;f__Gaiellaceae;g__;s__\n2          k__Bacteria;p__Firmicutes;c__Bacilli;o__Lactobacillales;f__Streptococcaceae;g__Streptococcus;s__\n3     k__Bacteria;p__Bacteroidetes;c__Sphingobacteriia;o__Sphingobacteriales;f__Sphingobacteriaceae;g__;s__\n4          k__Bacteria;p__Proteobacteria;c__Alphaproteobacteria;o__Rhizobiales;f__Bradyrhizobiaceae;g__;s__\n5 k__Bacteria;p__Actinobacteria;c__Actinobacteria;o__Actinomycetales;f__Nocardioidaceae;g__Nocardioides;s__\n6                       k__Bacteria;p__Acidobacteria;c__Holophagae;o__Holophagales;f__Holophagaceae;g__;s__\n\ndim(tax_raw)\n\n[1] 7396    2\n\n\nThe taxonomic information is for the unfiltered OTUs; therefore, we need to filter this file as well. We also need to divide the data frame into seven taxonomic levels instead of one string for phyloseq.\n\nhead(ph)\n\n          ph\n103.BZ1 5.12\n103.CR1 8.00\n103.GB2 7.57\n103.GB3 7.18\n103.GB1 6.84\n103.GB5 8.22\n\n\nThis data frame looks fine.\n\n\n\nRemove the X in the column name so they match with the taxonomy data.\n\ncolnames(otu_raw) &lt;- str_remove_all(colnames(otu_raw), pattern = \"X\")\n\nFilter the taxonomic information and split the data into the different taxonomic ranks.\n\ntax_raw &lt;- tax_raw %&gt;%\n  filter(Feature.ID %in% colnames(otu_raw))\n\n# Sanity check: do the dimensions match? 116 Taxonomic assignments\n# and 116 OTUs.\ndim(tax_raw)\n\n[1] 116   2\n\ndim(otu_raw)\n\n[1]  89 116\n\n\n\ntaxonomic_ranks &lt;-\n  c(\"Kingdom\", \"Phylum\", \"Class\", \"Order\",\n    \"Family\", \"Genus\", \"Species\")\n\ntax_raw &lt;- tax_raw %&gt;%\n  separate_wider_delim(., cols = \"Taxon\",\n                       delim = \";\", names = taxonomic_ranks)\n\n# Phyloseq needs the OTU ids as rownames\ntax_raw &lt;- tax_raw %&gt;%\n  column_to_rownames(\"Feature.ID\")\n\n\n\n\nWe need the otu table and taxonomic table in matrix form to construct the phylo object. Also, we need to remove the pseudo-count of 1\n\n# remove pseudo-count of 1\notu_raw &lt;- otu_raw - 1\n# transform to matrix\notu &lt;- as.matrix(otu_raw)\ntax &lt;- as.matrix(tax_raw)\n\nConstruct the objects for the final phyloseq object\n\n# We have taxa in the columns so we need to specifiy this\notu &lt;- otu_table(otu, taxa_are_rows = FALSE)\ntax &lt;- tax_table(tax)\nsample_df &lt;- sample_data(ph)\n\nCombine everything in the phylo object.\n\nsoil &lt;- phyloseq(otu, tax, sample_df)\n\nFinally, save the data.\n\nsaveRDS(soil, file = \"./data/soil_processed/soil.RDS\")"
  },
  {
    "objectID": "90_soil_phyloseq.html#construct-a-phyloseq-object",
    "href": "90_soil_phyloseq.html#construct-a-phyloseq-object",
    "title": "Practical applications of learned concepts in R",
    "section": "",
    "text": "Here, we show how to construct the phyloseq object based on the taxonomic table, the ASV table, and the metadata. We use the 88 soil dataset (Lauber et al. 2009) obtained from the gglasso (Schaipp, Vlasovets, and Müller 2021) tutorial. The raw data can be downloaded from the GitHub repositories. According the to tutorial the data is already processed in the following way:\n\nFilter for OTUs with minimum abundance of \\(100\\) and\nadd pseudo-count of \\(1\\).\n\nData sources:\n\nTaxonomy: https://github.com/Vlasovets/GGLasso/blob/cfbf01535c88bbcd3ba60f24b5b867472d549f89/data/soil/original/88soils_taxonomy.txt\nOTU table: https://github.com/Vlasovets/GGLasso/blob/master/data/soil/processed/soil_116.csv\nMetadata: https://github.com/Vlasovets/GGLasso/blob/master/data/soil/processed/ph.csv\n\nA detailed tutorial on constructing a phyloseq object can be found on the official phyloseq website.\nWe will need 2 packages for analysis:\n\nphyloseq for the data structure and\ntidyverse for data wranging.\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.1     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(phyloseq)\n\n\n\nRead the different data tables.\n\n# The OTU table contains rownames in the column X\notu_raw &lt;- read.csv(\"./data/soil_raw/soil_116.csv\", header = TRUE, row.names = \"X\")\ntax_raw &lt;- read.table(\"./data/soil_raw/88soils_taxonomy.txt\", \n                      header = TRUE, sep = \"\\t\")\n# The ph data also contains rownames in X.SampleID\nph &lt;- read.csv(\"./data/soil_raw/ph.csv\", header = TRUE, row.names = \"X.SampleID\")\n\nPrint the data.\n\nhead(otu_raw[, 1:6])\n\n        X1124701 X697997 X203969 X205391 X843189 X3431064\n103.CA2       16       3       1       1       1        4\n103.CO3       15       5       1       1       1        2\n103.SR3        2       1       1       1       1        2\n103.IE2        9       1       1       2       1        1\n103.BP1       14      68       1       1       1        4\n103.VC2        8       1       1       2       1        8\n\n\nThe OTU data looks good, but we must fix the column names since they start with X.\n\nhead(tax_raw)\n\n  Feature.ID\n1    1000512\n2    1000547\n3    1000654\n4    1000757\n5    1000876\n6    1001333\n                                                                                                      Taxon\n1                     k__Bacteria;p__Actinobacteria;c__Thermoleophilia;o__Gaiellales;f__Gaiellaceae;g__;s__\n2          k__Bacteria;p__Firmicutes;c__Bacilli;o__Lactobacillales;f__Streptococcaceae;g__Streptococcus;s__\n3     k__Bacteria;p__Bacteroidetes;c__Sphingobacteriia;o__Sphingobacteriales;f__Sphingobacteriaceae;g__;s__\n4          k__Bacteria;p__Proteobacteria;c__Alphaproteobacteria;o__Rhizobiales;f__Bradyrhizobiaceae;g__;s__\n5 k__Bacteria;p__Actinobacteria;c__Actinobacteria;o__Actinomycetales;f__Nocardioidaceae;g__Nocardioides;s__\n6                       k__Bacteria;p__Acidobacteria;c__Holophagae;o__Holophagales;f__Holophagaceae;g__;s__\n\ndim(tax_raw)\n\n[1] 7396    2\n\n\nThe taxonomic information is for the unfiltered OTUs; therefore, we need to filter this file as well. We also need to divide the data frame into seven taxonomic levels instead of one string for phyloseq.\n\nhead(ph)\n\n          ph\n103.BZ1 5.12\n103.CR1 8.00\n103.GB2 7.57\n103.GB3 7.18\n103.GB1 6.84\n103.GB5 8.22\n\n\nThis data frame looks fine.\n\n\n\nRemove the X in the column name so they match with the taxonomy data.\n\ncolnames(otu_raw) &lt;- str_remove_all(colnames(otu_raw), pattern = \"X\")\n\nFilter the taxonomic information and split the data into the different taxonomic ranks.\n\ntax_raw &lt;- tax_raw %&gt;%\n  filter(Feature.ID %in% colnames(otu_raw))\n\n# Sanity check: do the dimensions match? 116 Taxonomic assignments\n# and 116 OTUs.\ndim(tax_raw)\n\n[1] 116   2\n\ndim(otu_raw)\n\n[1]  89 116\n\n\n\ntaxonomic_ranks &lt;-\n  c(\"Kingdom\", \"Phylum\", \"Class\", \"Order\",\n    \"Family\", \"Genus\", \"Species\")\n\ntax_raw &lt;- tax_raw %&gt;%\n  separate_wider_delim(., cols = \"Taxon\",\n                       delim = \";\", names = taxonomic_ranks)\n\n# Phyloseq needs the OTU ids as rownames\ntax_raw &lt;- tax_raw %&gt;%\n  column_to_rownames(\"Feature.ID\")\n\n\n\n\nWe need the otu table and taxonomic table in matrix form to construct the phylo object. Also, we need to remove the pseudo-count of 1\n\n# remove pseudo-count of 1\notu_raw &lt;- otu_raw - 1\n# transform to matrix\notu &lt;- as.matrix(otu_raw)\ntax &lt;- as.matrix(tax_raw)\n\nConstruct the objects for the final phyloseq object\n\n# We have taxa in the columns so we need to specifiy this\notu &lt;- otu_table(otu, taxa_are_rows = FALSE)\ntax &lt;- tax_table(tax)\nsample_df &lt;- sample_data(ph)\n\nCombine everything in the phylo object.\n\nsoil &lt;- phyloseq(otu, tax, sample_df)\n\nFinally, save the data.\n\nsaveRDS(soil, file = \"./data/soil_processed/soil.RDS\")"
  },
  {
    "objectID": "90_soil_phyloseq.html#computational-environment",
    "href": "90_soil_phyloseq.html#computational-environment",
    "title": "Practical applications of learned concepts in R",
    "section": "Computational environment",
    "text": "Computational environment\n\nsessionInfo()\n\nR version 4.2.3 (2023-03-15 ucrt)\nPlatform: x86_64-w64-mingw32/x64 (64-bit)\nRunning under: Windows 10 x64 (build 19045)\n\nMatrix products: default\n\nlocale:\n[1] LC_COLLATE=English_Germany.utf8  LC_CTYPE=English_Germany.utf8   \n[3] LC_MONETARY=English_Germany.utf8 LC_NUMERIC=C                    \n[5] LC_TIME=English_Germany.utf8    \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] phyloseq_1.40.0 lubridate_1.9.2 forcats_1.0.0   stringr_1.5.0  \n [5] dplyr_1.1.1     purrr_1.0.1     readr_2.1.4     tidyr_1.3.0    \n [9] tibble_3.2.1    ggplot2_3.4.1   tidyverse_2.0.0\n\nloaded via a namespace (and not attached):\n [1] Biobase_2.56.0         jsonlite_1.8.4         splines_4.2.3         \n [4] foreach_1.5.2          stats4_4.2.3           GenomeInfoDbData_1.2.8\n [7] yaml_2.3.7             pillar_1.9.0           lattice_0.20-45       \n[10] glue_1.6.2             digest_0.6.31          XVector_0.36.0        \n[13] colorspace_2.1-0       htmltools_0.5.5        Matrix_1.5-3          \n[16] plyr_1.8.8             pkgconfig_2.0.3        zlibbioc_1.42.0       \n[19] scales_1.2.1           tzdb_0.3.0             timechange_0.2.0      \n[22] mgcv_1.8-42            generics_0.1.3         IRanges_2.30.0        \n[25] withr_2.5.0            BiocGenerics_0.42.0    cli_3.6.1             \n[28] survival_3.5-3         magrittr_2.0.3         crayon_1.5.2          \n[31] evaluate_0.20          fansi_1.0.4            nlme_3.1-162          \n[34] MASS_7.3-58.2          vegan_2.6-4            tools_4.2.3           \n[37] data.table_1.14.8      hms_1.1.3              lifecycle_1.0.3       \n[40] Rhdf5lib_1.18.2        S4Vectors_0.34.0       munsell_0.5.0         \n[43] cluster_2.1.4          Biostrings_2.64.0      ade4_1.7-22           \n[46] compiler_4.2.3         GenomeInfoDb_1.32.2    rlang_1.1.0           \n[49] rhdf5_2.40.0           grid_4.2.3             RCurl_1.98-1.12       \n[52] iterators_1.0.14       rhdf5filters_1.8.0     biomformat_1.24.0     \n[55] rstudioapi_0.14        htmlwidgets_1.6.2      igraph_1.4.1          \n[58] bitops_1.0-7           rmarkdown_2.21         gtable_0.3.3          \n[61] codetools_0.2-19       multtest_2.52.0        DBI_1.1.3             \n[64] reshape2_1.4.4         R6_2.5.1               knitr_1.42            \n[67] fastmap_1.1.1          utf8_1.2.3             permute_0.9-7         \n[70] ape_5.7-1              stringi_1.7.12         parallel_4.2.3        \n[73] Rcpp_1.0.10            vctrs_0.6.1            tidyselect_1.2.0      \n[76] xfun_0.38"
  },
  {
    "objectID": "9_practical_networks.html",
    "href": "9_practical_networks.html",
    "title": "Practical applications of learned concepts in R",
    "section": "",
    "text": "Here, we learn how a microbial association network is constructed and analyzed using the R package NetCoMi.\n\n\n\n\n\n\nThe R package NetCoMi\n\n\n\n\n\nThe NetCoMi (Peschel et al. 2021) package is specifically designed to construct, analyze, and compare networks for microbiome data. It implements the complete workflow of learning and analyzing microbial networks explained in lecture 8. Instead of using several functions for each of the steps, NetCoMi provides a single function for network construction (netConstruct()), so the package streamlines the workflow considerably. The user can choose from a variety of methods for data preprocessing, association estimation, sparsification, and transformation. The returned microNet object can then be passed to netAnalyze() (the network analysis function) so that all necessary information is available for the network analysis workflow.\n\n\n\n\n\nWe start by installing NetCoMi from GitHub. Two of NetCoMi’s dependencies are also only available on GitHub. We will install them manually beforehand to avoid problems.\n\ndevtools::install_github(\"zdk123/SpiecEasi\")\n\ndevtools::install_github(\"GraceYoon/SPRING\")\n\ndevtools::install_github(\"stefpeschel/NetCoMi\", force = TRUE, ref = \"TSE\",\n                         dependencies = c(\"Depends\", \"Imports\", \"LinkingTo\"),\n                         repos = c(\"https://cloud.r-project.org/\",\n                                   BiocManager::repositories()))\n\nLoad packages needed in this exercise.\n\nlibrary(NetCoMi)\n\nLoading required package: SpiecEasi\n\n\n\n\nlibrary(phyloseq)\n\n\n\n\nThe 88 soil dataset (Lauber et al. 2009) is again used in this example.\n\nsoil <- readRDS(\"data/soil_processed/soil.RDS\")\n\nTake a look at the data\n\nsoil\n\nphyloseq-class experiment-level object\notu_table()   OTU Table:         [ 116 taxa and 89 samples ]\nsample_data() Sample Data:       [ 89 samples by 1 sample variables ]\ntax_table()   Taxonomy Table:    [ 116 taxa by 7 taxonomic ranks ]\n\n# Read count table\notu_table(soil)[1:10, 1:6]\n\nOTU Table:          [6 taxa and 10 samples]\n                     taxa are columns\n        1124701 697997 203969 205391 843189 3431064\n103.CA2      15      2      0      0      0       3\n103.CO3      14      4      0      0      0       1\n103.SR3       1      0      0      0      0       1\n103.IE2       8      0      0      1      0       0\n103.BP1      13     67      0      0      0       3\n103.VC2       7      0      0      1      0       7\n103.SA2       6      1      0      0      0       0\n103.GB2       3      3      0      0      0       0\n103.CO2       2      0      0      1      0       5\n103.KP1       2      1      0      0      0       1\n\n# Taxonomy table\ntaxtab <- tax_table(soil)\nhead(taxtab)\n\nTaxonomy Table:     [6 taxa by 7 taxonomic ranks]:\n        Kingdom       Phylum                Class                    \n1124701 \"k__Bacteria\" \"p__Bacteroidetes\"    \"c__[Saprospirae]\"       \n697997  \"k__Bacteria\" \"p__Acidobacteria\"    \"c__[Chloracidobacteria]\"\n203969  \"k__Bacteria\" \"p__Acidobacteria\"    \"c__DA052\"               \n205391  \"k__Bacteria\" \"p__Acidobacteria\"    \"c__Solibacteres\"        \n843189  \"k__Bacteria\" \"p__Acidobacteria\"    \"c__Solibacteres\"        \n3431064 \"k__Bacteria\" \"p__Gemmatimonadetes\" \"c__Gemmatimonadetes\"    \n        Order                Family                Genus                     \n1124701 \"o__[Saprospirales]\" \"f__Chitinophagaceae\" \"g__\"                     \n697997  \"o__RB41\"            \"f__\"                 \"g__\"                     \n203969  \"o__Ellin6513\"       \"f__\"                 \"g__\"                     \n205391  \"o__Solibacterales\"  \"f__\"                 \"g__\"                     \n843189  \"o__Solibacterales\"  \"f__Solibacteraceae\"  \"g__Candidatus Solibacter\"\n3431064 \"o__N1423WL\"         \"f__\"                 \"g__\"                     \n        Species\n1124701 \"s__\"  \n697997  \"s__\"  \n203969  \"s__\"  \n205391  \"s__\"  \n843189  \"s__\"  \n3431064 \"s__\"  \n\n# Sample data\nsampdata <- sample_data(soil)\nhead(sampdata)\n\n          ph\n103.CA2 8.02\n103.CO3 6.02\n103.SR3 6.95\n103.IE2 5.52\n103.BP1 7.53\n103.VC2 5.99\n\n\n\n\n\nIf we want to generate a network on genus level, we run into two problems:\n\nThere are unidentified genera.\nNot all genera are unique.\n\n\ntable(taxtab[, \"Genus\"])\n\n\n                     g__              g__Bacillus           g__Balneimonas \n                      83                        1                        4 \n       g__Bradyrhizobium          g__Burkholderia g__Candidatus Solibacter \n                       4                        1                        2 \n         g__Edaphobacter        g__Flavobacterium           g__Gallionella \n                       1                        1                        1 \n     g__Geodermatophilus          g__Kaistobacter         g__Mycobacterium \n                       1                        1                        1 \n           g__Phormidium        g__Planomicrobium           g__Rhodoplanes \n                       1                        1                        8 \n          g__Rubrobacter          g__Sporosarcina \n                       4                        1 \n\n\nSolutions:\n\nUnknown genera are named by higher taxonomic ranks.\nDuplicates are numbered to make them unique.\n\nNetCoMi provides a function renameTaxa(), which does this job for us. It can also be used to rename the taxa according to a desired pattern.\n\n# Rename taxonomic table and make Rank6 (genus) unique\nsoil_renamed <- renameTaxa(soil, \n                                  pat = \"<name>\", \n                                  substPat = \"<name>_<subst_name>(<subst_R>)\",\n                                  numDupli = \"Genus\")\n\ntaxtab_renamed <- tax_table(soil_renamed)\n\nhead(cbind(taxtab[, \"Genus\"], taxtab_renamed[, \"Genus\"]), 15)\n\n        Genus                      Genus                   \n1124701 \"g__\"                      \"1_Chitinophagaceae(F)\" \n697997  \"g__\"                      \"2_RB41(O)\"             \n203969  \"g__\"                      \"3_Ellin6513(O)\"        \n205391  \"g__\"                      \"4_Solibacterales(O)\"   \n843189  \"g__Candidatus Solibacter\" \"Candidatus Solibacter1\"\n3431064 \"g__\"                      \"5_N1423WL(O)\"          \n156611  \"g__\"                      \"6_Acidobacteriaceae(F)\"\n2867534 \"g__Candidatus Solibacter\" \"Candidatus Solibacter2\"\n4440638 \"g__\"                      \"7_RB41(O)\"             \n216549  \"g__\"                      \"8_RB41(O)\"             \n4440611 \"g__\"                      \"9_RB41(O)\"             \n4416927 \"g__Balneimonas\"           \"Balneimonas1\"          \n2578357 \"g__\"                      \"10_Ellin6513(O)\"       \n1122202 \"g__\"                      \"11_RB41(O)\"            \n3616127 \"g__\"                      \"12_Solibacterales(O)\"  \n\n\nNow, we can pass the phyloseq object with renamed genera to NetCoMi’s netConstruct() function.\nSpiecEasi is used in the “MB” mode (Meinshausen & Bühlman neighborhood selection) to measure associations between the genera.\nA few comments on the arguments:\n\nThe network is created on genus level.\nThe data are filtered as follows:\n\nOnly samples with a total of at least 100 reads are included (argument filtSamp).\nOnly taxa occuring in at least 5 samples are included (argument filtTax).\n\nmeasure defines the association or dissimilarity measure, in our case SpiecEasi. Additional arguments are passed to spiec.easi() via measurePar. We reduce the number of StARS repetitions to 10 to reduce runtime.\nNormalization and zero handling is done internally by spiec.easi(), so we set normMethod and zeroMethod to “none”.\nsparsMethod is also set to “none” (SpiecEasi includes StARS model selection to obtain a sparse network).\nThe “signed” method is used to transform associations into dissimilarities (argument dissFunc). Thus, strongly negatively associated taxa have a high dissimilarity and conversely a low similarity, corresponding to low edge weights on the network plot.\n\n\nnet <- netConstruct(soil_renamed,\n                    taxRank = \"Genus\",\n                    filtSamp = \"totalReads\",\n                    filtSampPar = list(totalReads = 100),\n                    filtTax = \"numbSamp\",\n                    filtTaxPar = list(numbSamp = 5),\n                    measure = \"spieceasi\",\n                    measurePar = list(method = \"mb\",\n                                      pulsar.params = list(rep.num = 10)),\n                    zeroMethod = \"none\",\n                    normMethod = \"none\",\n                    sparsMethod = \"none\", \n                    dissFunc = \"signed\",\n                    verbose = 3,\n                    seed = 12345)\n\n\n\n\n\n\n\nnetConstruct() returns an object of the class microNet, which contains all matrices generated during network construction.\nThe object also contains an edge list, giving each edge’s estimated association, dissimilarity, and adjacency. Let’s take a quick look at the edges with the highest and lowest edge weights:\n\nedgelist <- net$edgelist1[order(net$edgelist1$adja, \n                                        decreasing = TRUE), ]\nhead(edgelist)\n\n                            v1                    v2      asso      diss\n210 64_Syntrophobacteraceae(F)            73_PK29(O) 0.3597096 0.5658138\n190                 50_RB41(O)            69_RB41(O) 0.3587220 0.5662499\n196                 54_RB41(O)            82_RB41(O) 0.3560518 0.5674276\n178            43_Ellin6513(O)       55_Ellin6513(O) 0.3485638 0.5707172\n112      24_Sinobacteraceae(F) 68_Koribacteraceae(F) 0.3238421 0.5814456\n2        1_Chitinophagaceae(F)             9_RB41(O) 0.3000597 0.5915827\n         adja\n210 0.4341862\n190 0.4337501\n196 0.4325724\n178 0.4292828\n112 0.4185544\n2   0.4084173\n\ntail(edgelist)\n\n                         v1                      v2         asso      diss\n129   30_Sinobacteraceae(F)   35_Sinobacteraceae(F) -0.009823811 0.7105715\n193            Kaistobacter   75_Koribacteraceae(F) -0.010324659 0.7107477\n35                8_RB41(O) 33_Rhodospirillaceae(F) -0.010716865 0.7108857\n113 25_Rhodospirillaceae(F)   34_Koribacteraceae(F) -0.011317239 0.7110968\n99  22_Bradyrhizobiaceae(F)            Rubrobacter3 -0.013935976 0.7120168\n9            3_Ellin6513(O)         Bradyrhizobium4 -0.030935464 0.7179608\n         adja\n129 0.2894285\n193 0.2892523\n35  0.2891143\n113 0.2889032\n99  0.2879832\n9   0.2820392\n\n\n\n\n\n\nnetprops <- netAnalyze(net, \n                       clustMethod = \"cluster_fast_greedy\",\n                       hubPar = \"eigenvector\",\n                       normDeg = FALSE,\n                       gcmHeat = FALSE)\n\n\nsummary(netprops)\n\n\nComponent sizes\n```````````````           \nsize: 111 1\n   #:   1 3\n______________________________\nGlobal network properties\n`````````````````````````\nLargest connected component (LCC):\n                                 \nRelative LCC size         0.97368\nClustering coefficient    0.21135\nModularity                0.61887\nPositive edge percentage 95.41284\nEdge density              0.03571\nNatural connectivity      0.01144\nVertex connectivity       1.00000\nEdge connectivity         1.00000\nAverage dissimilarity*    0.98851\nAverage path length**     2.89288\n\nWhole network:\n                                 \nNumber of components      4.00000\nClustering coefficient    0.21135\nModularity                0.61887\nPositive edge percentage 95.41284\nEdge density              0.03385\nNatural connectivity      0.01108\n-----\n*: Dissimilarity = 1 - edge weight\n**: Path length = Units with average dissimilarity\n\n______________________________\nClusters\n- In the whole network\n- Algorithm: cluster_fast_greedy\n```````````````````````````````` \n                           \nname: 0  1  2  3  4  5  6 7\n   #: 3 19 31 18 10 16 14 3\n\n______________________________\nHubs\n- In alphabetical/numerical order\n- Based on empirical quantiles of centralities\n```````````````````````````````````````````````                      \n 12_Solibacterales(O) \n 34_Koribacteraceae(F)\n 42_Ellin6513(O)      \n 61_Koribacteraceae(F)\n 72_Koribacteraceae(F)\n 75_Koribacteraceae(F)\n\n______________________________\nCentrality measures\n- In decreasing order\n- Centrality of disconnected components is zero\n````````````````````````````````````````````````\nDegree (unnormalized):\n                          \n75_Koribacteraceae(F)   11\n68_Koribacteraceae(F)   10\n17_RB41(O)               9\n30_Sinobacteraceae(F)    8\n33_Rhodospirillaceae(F)  8\n34_Koribacteraceae(F)    8\n42_Ellin6513(O)          8\n61_Koribacteraceae(F)    8\n12_Solibacterales(O)     7\n16_Ellin6513(O)          7\n\nBetweenness centrality (normalized):\n                               \n33_Rhodospirillaceae(F) 0.18098\n30_Sinobacteraceae(F)   0.15913\n50_RB41(O)              0.13044\n75_Koribacteraceae(F)   0.12811\n12_Solibacterales(O)    0.11526\n42_Ellin6513(O)         0.10726\n17_RB41(O)              0.10492\n68_Koribacteraceae(F)   0.10392\nRubrobacter3            0.09958\n35_Sinobacteraceae(F)   0.09358\n\nCloseness centrality (normalized):\n                               \n75_Koribacteraceae(F)   0.56896\n12_Solibacterales(O)    0.56828\n33_Rhodospirillaceae(F) 0.56453\n30_Sinobacteraceae(F)   0.56001\n42_Ellin6513(O)         0.54787\n17_RB41(O)              0.52447\n50_RB41(O)              0.51804\n61_Koribacteraceae(F)   0.51734\n34_Koribacteraceae(F)   0.50888\n56_Solibacterales(O)    0.50290\n\nEigenvector centrality (normalized):\n                               \n75_Koribacteraceae(F)   1.00000\n12_Solibacterales(O)    0.72317\n72_Koribacteraceae(F)   0.70549\n34_Koribacteraceae(F)   0.70273\n42_Ellin6513(O)         0.70056\n61_Koribacteraceae(F)   0.64929\n56_Solibacterales(O)    0.57609\n16_Ellin6513(O)         0.55649\n33_Rhodospirillaceae(F) 0.50822\n68_Koribacteraceae(F)   0.49436\n\n\n\n\n\nIn the first plot, node colors represent the detected clusters and node sizes are scaled by eigenvector centrality. Hub nodes are highlighted by default. Singletons are not included in the plot. To improve the readability, NetCoMi’s “intelligent” label shortening approach is used.\nNote that nodes are sometimes placed too close together so that the labels overlap. You may need to play around with the repulsion argument until you find a value where the labels are legible, but also the clusters are still well recognizable.\n\nplot(netprops,\n     repulsion = 0.95,\n     rmSingles = TRUE,\n     shortenLabels = \"none\",\n     labelScale = TRUE,\n     nodeSize = \"eigenvector\",\n     nodeSizeSpread = 3,\n     nodeColor = \"cluster\", \n     hubBorderCol = \"gray40\",\n     cexNodes = 1.8,\n     cexLabels = 3,\n     edgeTranspHigh = 20,\n     title1 = \"Network properties highlighted\", \n     showTitle = TRUE,\n     cexTitle = 2.3,\n     mar = c(1, 3, 4, 8))\n\nlegend(0.7, 1.1, cex = 1.7, title = \"estimated correlation:\",\n       legend = c(\"+\",\"-\"), lty = 1, lwd = 3, col = c(\"#009900\",\"red\"), \n       bty = \"n\", horiz = TRUE)\n\n\n\n\n\n\n\nWe now color nodes according to their phylum. The node sizes are proportional to a taxon’s sum of mclr-transformed abundances. As already mentioned in Section @ref(spring-network), this is the normalization method used by SPRING. A color palette from RColorBrewer is used here.\n\n# Generate vector with phylum names for node coloring\nphyla <- as.factor(taxtab_renamed[, \"Phylum\"])\nnames(phyla) <- taxtab_renamed[, \"Genus\"]\n\n# Reorder levels\nphyla <- reorder(phyla, phyla, FUN = length, decreasing = TRUE)\n\n# Create color vector\ncolvec <- rainbow(length(levels(phyla)))\n\nplot(netprops,\n     repulsion = 0.95,\n     rmSingles = TRUE,\n     shortenLabels = \"none\",\n     labelScale = TRUE,\n     nodeSize = \"clr\",\n     nodeColor = \"feature\", \n     featVecCol = phyla, \n     colorVec =  colvec,\n     #nodeTransp = 20,\n     highlightHubs = FALSE,\n     cexNodes = 1.2,\n          cexLabels = 3,\n     edgeTranspHigh = 20,\n     title1 = \"Data features highlighted\", \n     showTitle = TRUE,\n     cexTitle = 2.3,\n     mar = c(1, 10, 4, 6))\n\n# Add legends\nlegend(0.7, 1.1, cex = 1.7, title = \"estimated correlation:\",\n       legend = c(\"+\",\"-\"), lty = 1, lwd = 3, col = c(\"#009900\",\"red\"), \n       bty = \"n\", horiz = TRUE)\n\n# Colors used in the legend should be equally transparent as in the plot\ncol_transp <- colToTransp(colvec, 60)\n\nlegend(-1.8, 1.1, cex = 1.7, pt.cex = 2.5, title = \"Phylum:\", \n       legend=levels(phyla), col = col_transp, bty = \"n\", pch = 16) \n\n\n\n\nSelect Proteobacteria\n\nsel <- names(phyla[phyla == \"Proteobacteria\"])\nsel <- sel[sel %in% colnames(net$adjaMat1)]\n\nplot(netprops,\n          nodeFilter = \"names\",\n     nodeFilterPar = sel,\n     repulsion = 0.95,\n     rmSingles = TRUE,\n     shortenLabels = \"none\",\n     labelScale = TRUE,\n     nodeSize = \"eigenvector\",\n     nodeSizeSpread = 3,\n     nodeColor = \"cluster\", \n     hubBorderCol = \"gray40\",\n     cexNodes = 1.8,\n     cexLabels = 3,\n     edgeTranspHigh = 20,\n     title1 = \"Network properties highlighted\", \n     showTitle = TRUE,\n     cexTitle = 2.3,\n     mar = c(1, 3, 4, 8))\n\nlegend(0.7, 1.1, cex = 1.7, title = \"estimated correlation:\",\n       legend = c(\"+\",\"-\"), lty = 1, lwd = 3, col = c(\"#009900\",\"red\"), \n       bty = \"n\", horiz = TRUE)\n\n\n\n\n\nplot(netprops,\n     nodeFilter = \"highestConnect\",\n     nodeFilterPar = 100,\n     repulsion = 0.95,\n     rmSingles = TRUE,\n     shortenLabels = \"none\",\n     labelScale = TRUE,\n     nodeSize = \"eigenvector\",\n     nodeSizeSpread = 3,\n     nodeColor = \"cluster\", \n     hubBorderCol = \"gray40\",\n     cexNodes = 1.8,\n     cexLabels = 3,\n     edgeTranspHigh = 20,\n     title1 = \"Network properties highlighted\", \n     showTitle = TRUE,\n     cexTitle = 2.3,\n     mar = c(1, 3, 4, 8))\n\nlegend(0.7, 1.1, cex = 1.7, title = \"estimated correlation:\",\n       legend = c(\"+\",\"-\"), lty = 1, lwd = 3, col = c(\"#009900\",\"red\"), \n       bty = \"n\", horiz = TRUE)"
  },
  {
    "objectID": "8_practical_networks.html",
    "href": "8_practical_networks.html",
    "title": "Practical applications of learned concepts in R",
    "section": "",
    "text": "Here, we learn how a microbial association network is constructed and analyzed using the R package NetCoMi.\n\n\n\n\n\n\nThe R package NetCoMi\n\n\n\n\n\nThe NetCoMi (Peschel et al. 2021) package is specifically designed to construct, analyze, and compare networks for microbiome data. It implements the complete workflow of learning and analyzing microbial networks explained in lecture 8. Instead of using several functions for each of the steps, NetCoMi provides a single function for network construction (netConstruct()), so the package streamlines the workflow considerably. The user can choose from a variety of methods for data preprocessing, association estimation, sparsification, and transformation. The returned microNet object can then be passed to netAnalyze() (the network analysis function) so that all necessary information is available for the network analysis workflow.\n\n\n\n\n\nWe start by installing NetCoMi from GitHub. Two of NetCoMi’s dependencies are also only available on GitHub. We will install them manually beforehand to avoid problems.\n\ndevtools::install_github(\"zdk123/SpiecEasi\")\n\ndevtools::install_github(\"GraceYoon/SPRING\")\n\ndevtools::install_github(\"stefpeschel/NetCoMi\", force = TRUE, ref = \"TSE\",\n                         dependencies = c(\"Depends\", \"Imports\", \"LinkingTo\"),\n                         repos = c(\"https://cloud.r-project.org/\",\n                                   BiocManager::repositories()))\n\nLoad packages needed in this exercise.\n\nlibrary(NetCoMi)\n\nLoading required package: SpiecEasi\n\n\n\n\nlibrary(phyloseq)\n\n\n\n\nThe 88 soil dataset (Lauber et al. 2009) is again used in this example.\n\nsoil <- readRDS(\"data/soil_processed/soil.RDS\")\n\nTake a look at the data\n\nsoil\n\nphyloseq-class experiment-level object\notu_table()   OTU Table:         [ 116 taxa and 89 samples ]\nsample_data() Sample Data:       [ 89 samples by 1 sample variables ]\ntax_table()   Taxonomy Table:    [ 116 taxa by 7 taxonomic ranks ]\n\n# Read count table\notu_table(soil)[1:10, 1:6]\n\nOTU Table:          [6 taxa and 10 samples]\n                     taxa are columns\n        1124701 697997 203969 205391 843189 3431064\n103.CA2      15      2      0      0      0       3\n103.CO3      14      4      0      0      0       1\n103.SR3       1      0      0      0      0       1\n103.IE2       8      0      0      1      0       0\n103.BP1      13     67      0      0      0       3\n103.VC2       7      0      0      1      0       7\n103.SA2       6      1      0      0      0       0\n103.GB2       3      3      0      0      0       0\n103.CO2       2      0      0      1      0       5\n103.KP1       2      1      0      0      0       1\n\n# Taxonomy table\ntaxtab <- tax_table(soil)\nhead(taxtab)\n\nTaxonomy Table:     [6 taxa by 7 taxonomic ranks]:\n        Kingdom       Phylum                Class                    \n1124701 \"k__Bacteria\" \"p__Bacteroidetes\"    \"c__[Saprospirae]\"       \n697997  \"k__Bacteria\" \"p__Acidobacteria\"    \"c__[Chloracidobacteria]\"\n203969  \"k__Bacteria\" \"p__Acidobacteria\"    \"c__DA052\"               \n205391  \"k__Bacteria\" \"p__Acidobacteria\"    \"c__Solibacteres\"        \n843189  \"k__Bacteria\" \"p__Acidobacteria\"    \"c__Solibacteres\"        \n3431064 \"k__Bacteria\" \"p__Gemmatimonadetes\" \"c__Gemmatimonadetes\"    \n        Order                Family                Genus                     \n1124701 \"o__[Saprospirales]\" \"f__Chitinophagaceae\" \"g__\"                     \n697997  \"o__RB41\"            \"f__\"                 \"g__\"                     \n203969  \"o__Ellin6513\"       \"f__\"                 \"g__\"                     \n205391  \"o__Solibacterales\"  \"f__\"                 \"g__\"                     \n843189  \"o__Solibacterales\"  \"f__Solibacteraceae\"  \"g__Candidatus Solibacter\"\n3431064 \"o__N1423WL\"         \"f__\"                 \"g__\"                     \n        Species\n1124701 \"s__\"  \n697997  \"s__\"  \n203969  \"s__\"  \n205391  \"s__\"  \n843189  \"s__\"  \n3431064 \"s__\"  \n\n# Sample data\nsampdata <- sample_data(soil)\nhead(sampdata)\n\n          ph\n103.CA2 8.02\n103.CO3 6.02\n103.SR3 6.95\n103.IE2 5.52\n103.BP1 7.53\n103.VC2 5.99\n\n\n\n\n\nIf we want to generate a network on genus level, we run into two problems:\n\nThere are unidentified genera.\nNot all genera are unique.\n\n\ntable(taxtab[, \"Genus\"])\n\n\n                     g__              g__Bacillus           g__Balneimonas \n                      83                        1                        4 \n       g__Bradyrhizobium          g__Burkholderia g__Candidatus Solibacter \n                       4                        1                        2 \n         g__Edaphobacter        g__Flavobacterium           g__Gallionella \n                       1                        1                        1 \n     g__Geodermatophilus          g__Kaistobacter         g__Mycobacterium \n                       1                        1                        1 \n           g__Phormidium        g__Planomicrobium           g__Rhodoplanes \n                       1                        1                        8 \n          g__Rubrobacter          g__Sporosarcina \n                       4                        1 \n\n\nSolutions:\n\nUnknown genera are named by higher taxonomic ranks.\nDuplicates are numbered to make them unique.\n\nNetCoMi provides a function renameTaxa(), which does this job for us. It can also be used to rename the taxa according to a desired pattern.\n\n# Rename taxonomic table and make Rank6 (genus) unique\nsoil_renamed <- renameTaxa(soil, \n                           pat = \"<name>\", \n                           substPat = \"<name>_<subst_name>(<subst_R>)\",\n                           numDupli = \"Genus\")\n\ntaxtab_renamed <- tax_table(soil_renamed)\n\nhead(cbind(taxtab[, \"Genus\"], taxtab_renamed[, \"Genus\"]), 15)\n\n        Genus                      Genus                   \n1124701 \"g__\"                      \"1_Chitinophagaceae(F)\" \n697997  \"g__\"                      \"2_RB41(O)\"             \n203969  \"g__\"                      \"3_Ellin6513(O)\"        \n205391  \"g__\"                      \"4_Solibacterales(O)\"   \n843189  \"g__Candidatus Solibacter\" \"Candidatus Solibacter1\"\n3431064 \"g__\"                      \"5_N1423WL(O)\"          \n156611  \"g__\"                      \"6_Acidobacteriaceae(F)\"\n2867534 \"g__Candidatus Solibacter\" \"Candidatus Solibacter2\"\n4440638 \"g__\"                      \"7_RB41(O)\"             \n216549  \"g__\"                      \"8_RB41(O)\"             \n4440611 \"g__\"                      \"9_RB41(O)\"             \n4416927 \"g__Balneimonas\"           \"Balneimonas1\"          \n2578357 \"g__\"                      \"10_Ellin6513(O)\"       \n1122202 \"g__\"                      \"11_RB41(O)\"            \n3616127 \"g__\"                      \"12_Solibacterales(O)\"  \n\n\n\n\n\nNow, we can pass the phyloseq object with renamed genera to NetCoMi’s netConstruct() function.\nSpiecEasi is used in the “MB” mode (Meinshausen & Bühlman neighborhood selection) to measure associations between the genera.\nA few comments on the arguments:\n\nThe network is created on genus level.\nThe data are filtered as follows:\n\nOnly samples with a total of at least 100 reads are included (argument filtSamp).\nOnly taxa occuring in at least 5 samples are included (argument filtTax).\n\nmeasure defines the association or dissimilarity measure, in our case SpiecEasi. Additional arguments are passed to spiec.easi() via measurePar. We reduce the number of StARS repetitions to 10 to reduce runtime.\nNormalization and zero handling is done internally by spiec.easi(), so we set normMethod and zeroMethod to “none”.\nsparsMethod is also set to “none” (SpiecEasi includes StARS model selection to obtain a sparse network).\nThe “signed” method is used to transform associations into dissimilarities (argument dissFunc). Thus, strongly negatively associated taxa have a high dissimilarity and conversely a low similarity, corresponding to low edge weights on the network plot.\n\n\nnet <- netConstruct(soil_renamed,\n                    taxRank = \"Genus\",\n                    filtSamp = \"totalReads\",\n                    filtSampPar = list(totalReads = 100),\n                    filtTax = \"numbSamp\",\n                    filtTaxPar = list(numbSamp = 5),\n                    measure = \"spieceasi\",\n                    measurePar = list(method = \"mb\",\n                                      pulsar.params = list(rep.num = 10)),\n                    zeroMethod = \"none\",\n                    normMethod = \"none\",\n                    sparsMethod = \"none\", \n                    dissFunc = \"signed\",\n                    verbose = 3,\n                    seed = 12345)\n\n\n\n\n\n\n\nnetConstruct() returns an object of the class microNet, which contains all matrices generated during network construction.\nThe object also contains an edge list, giving each edge’s estimated association, dissimilarity, and adjacency. Let’s take a quick look at the edges with the highest and lowest edge weights:\n\nedgelist <- net$edgelist1[order(net$edgelist1$adja, decreasing = TRUE), ]\nhead(edgelist)\n\n                            v1                    v2      asso      diss\n210 64_Syntrophobacteraceae(F)            73_PK29(O) 0.3597096 0.5658138\n190                 50_RB41(O)            69_RB41(O) 0.3587220 0.5662499\n196                 54_RB41(O)            82_RB41(O) 0.3560518 0.5674276\n178            43_Ellin6513(O)       55_Ellin6513(O) 0.3485638 0.5707172\n112      24_Sinobacteraceae(F) 68_Koribacteraceae(F) 0.3238421 0.5814456\n2        1_Chitinophagaceae(F)             9_RB41(O) 0.3000597 0.5915827\n         adja\n210 0.4341862\n190 0.4337501\n196 0.4325724\n178 0.4292828\n112 0.4185544\n2   0.4084173\n\ntail(edgelist)\n\n                         v1                      v2         asso      diss\n129   30_Sinobacteraceae(F)   35_Sinobacteraceae(F) -0.009823811 0.7105715\n193            Kaistobacter   75_Koribacteraceae(F) -0.010324659 0.7107477\n35                8_RB41(O) 33_Rhodospirillaceae(F) -0.010716865 0.7108857\n113 25_Rhodospirillaceae(F)   34_Koribacteraceae(F) -0.011317239 0.7110968\n99  22_Bradyrhizobiaceae(F)            Rubrobacter3 -0.013935976 0.7120168\n9            3_Ellin6513(O)         Bradyrhizobium4 -0.030935464 0.7179608\n         adja\n129 0.2894285\n193 0.2892523\n35  0.2891143\n113 0.2889032\n99  0.2879832\n9   0.2820392\n\n\n\n\n\nThe microNet object is now passed to netAnalyze to perform network analysis.\nA few comments on the arguments:\n\ncentrLCC = TRUE: Centralities are calculated only for nodes in the largest connected component (LCC).\nClusters: Identified using greedy modularity optimization (by cluster_fast_greedy from igraph package).\nHubs: Nodes with an eigenvector centrality value above the empirical 95% quantile of all eigenvector centralities in the network.\nweightDeg = FALSE and normDeg = FALSE: The degree of a node is simply the number of its adjacent nodes.\ngcmHeat = FALSE: By default, a heatmap of the Graphlet Correlation Matrix (GCM) is plotted, which we disable here (gcmHeat = FALSE).\n\n\nnetprops <- netAnalyze(net, \n                       centrLCC = TRUE,\n                       clustMethod = \"cluster_fast_greedy\",\n                       hubPar = \"eigenvector\",\n                       hubQuant = 0.95,\n                       weightDeg = FALSE,\n                       normDeg = FALSE,\n                       gcmHeat = FALSE)\n\n\nsummary(netprops)\n\n\nComponent sizes\n```````````````           \nsize: 111 1\n   #:   1 3\n______________________________\nGlobal network properties\n`````````````````````````\nLargest connected component (LCC):\n                                 \nRelative LCC size         0.97368\nClustering coefficient    0.21135\nModularity                0.61887\nPositive edge percentage 95.41284\nEdge density              0.03571\nNatural connectivity      0.01144\nVertex connectivity       1.00000\nEdge connectivity         1.00000\nAverage dissimilarity*    0.98851\nAverage path length**     2.89288\n\nWhole network:\n                                 \nNumber of components      4.00000\nClustering coefficient    0.21135\nModularity                0.61887\nPositive edge percentage 95.41284\nEdge density              0.03385\nNatural connectivity      0.01108\n-----\n*: Dissimilarity = 1 - edge weight\n**: Path length = Units with average dissimilarity\n\n______________________________\nClusters\n- In the whole network\n- Algorithm: cluster_fast_greedy\n```````````````````````````````` \n                           \nname: 0  1  2  3  4  5  6 7\n   #: 3 19 31 18 10 16 14 3\n\n______________________________\nHubs\n- In alphabetical/numerical order\n- Based on empirical quantiles of centralities\n```````````````````````````````````````````````                      \n 12_Solibacterales(O) \n 34_Koribacteraceae(F)\n 42_Ellin6513(O)      \n 61_Koribacteraceae(F)\n 72_Koribacteraceae(F)\n 75_Koribacteraceae(F)\n\n______________________________\nCentrality measures\n- In decreasing order\n- Centrality of disconnected components is zero\n````````````````````````````````````````````````\nDegree (unnormalized):\n                          \n75_Koribacteraceae(F)   11\n68_Koribacteraceae(F)   10\n17_RB41(O)               9\n30_Sinobacteraceae(F)    8\n33_Rhodospirillaceae(F)  8\n34_Koribacteraceae(F)    8\n42_Ellin6513(O)          8\n61_Koribacteraceae(F)    8\n12_Solibacterales(O)     7\n16_Ellin6513(O)          7\n\nBetweenness centrality (normalized):\n                               \n33_Rhodospirillaceae(F) 0.18098\n30_Sinobacteraceae(F)   0.15913\n50_RB41(O)              0.13044\n75_Koribacteraceae(F)   0.12811\n12_Solibacterales(O)    0.11526\n42_Ellin6513(O)         0.10726\n17_RB41(O)              0.10492\n68_Koribacteraceae(F)   0.10392\nRubrobacter3            0.09958\n35_Sinobacteraceae(F)   0.09358\n\nCloseness centrality (normalized):\n                               \n75_Koribacteraceae(F)   0.56896\n12_Solibacterales(O)    0.56828\n33_Rhodospirillaceae(F) 0.56453\n30_Sinobacteraceae(F)   0.56001\n42_Ellin6513(O)         0.54787\n17_RB41(O)              0.52447\n50_RB41(O)              0.51804\n61_Koribacteraceae(F)   0.51734\n34_Koribacteraceae(F)   0.50888\n56_Solibacterales(O)    0.50290\n\nEigenvector centrality (normalized):\n                               \n75_Koribacteraceae(F)   1.00000\n12_Solibacterales(O)    0.72317\n72_Koribacteraceae(F)   0.70549\n34_Koribacteraceae(F)   0.70273\n42_Ellin6513(O)         0.70056\n61_Koribacteraceae(F)   0.64929\n56_Solibacterales(O)    0.57609\n16_Ellin6513(O)         0.55649\n33_Rhodospirillaceae(F) 0.50822\n68_Koribacteraceae(F)   0.49436\n\n\n\n\n\nIn the first plot, node colors represent the detected clusters and node sizes are scaled by eigenvector centrality. Hub nodes are highlighted by default. Singletons are not included in the plot.\nNote that nodes are sometimes placed too close together so that the labels overlap. You may need to play around with the repulsion argument until you find a value where the labels are legible, but also the clusters are still well recognizable.\n\nplot(netprops,\n     repulsion = 0.95,\n     rmSingles = TRUE,\n     shortenLabels = \"none\",\n     labelScale = TRUE,\n     nodeSize = \"eigenvector\",\n     nodeSizeSpread = 3,\n     nodeColor = \"cluster\", \n     hubBorderCol = \"gray40\",\n     cexNodes = 1.8,\n     cexLabels = 3,\n     edgeTranspHigh = 20,\n     title1 = \"Network properties highlighted\", \n     showTitle = TRUE,\n     cexTitle = 2.3,\n     mar = c(1, 3, 4, 8))\n\nlegend(0.7, 1.1, cex = 1.7, title = \"estimated correlation:\",\n       legend = c(\"+\",\"-\"), lty = 1, lwd = 3, col = c(\"#009900\",\"red\"), \n       bty = \"n\", horiz = TRUE)\n\n\n\n\n\n\n\nWe now color nodes according to their phylum. The node sizes are proportional to a taxon’s sum of clr-transformed abundances.\n\n# Generate vector with phylum names for node coloring\nphyla <- as.factor(taxtab_renamed[, \"Phylum\"])\nnames(phyla) <- taxtab_renamed[, \"Genus\"]\n\n# Reorder levels\nphyla <- reorder(phyla, phyla, FUN = length, decreasing = TRUE)\n\n# Create color vector\ncolvec <- rainbow(length(levels(phyla)))\n\nplot(netprops,\n     repulsion = 0.95,\n     rmSingles = TRUE,\n     shortenLabels = \"none\",\n     labelScale = TRUE,\n     nodeSize = \"clr\",\n     nodeColor = \"feature\", \n     featVecCol = phyla, \n     colorVec =  colvec,\n     highlightHubs = FALSE,\n     cexNodes = 1.2,\n     cexLabels = 3,\n     edgeTranspHigh = 20,\n     title1 = \"Data features highlighted\", \n     showTitle = TRUE,\n     cexTitle = 2.3,\n     mar = c(1, 10, 4, 6))\n\n# Add legends\nlegend(0.7, 1.1, cex = 1.7, title = \"estimated correlation:\",\n       legend = c(\"+\",\"-\"), lty = 1, lwd = 3, col = c(\"#009900\",\"red\"), \n       bty = \"n\", horiz = TRUE)\n\n# Colors used in the legend should be equally transparent as in the plot\ncol_transp <- colToTransp(colvec, 60)\n\nlegend(-1.8, 1.1, cex = 1.7, pt.cex = 2.5, title = \"Phylum:\", \n       legend=levels(phyla), col = col_transp, bty = \"n\", pch = 16) \n\n\n\n\n\n\n\nIf we are interested in a sub-network (here only genera belonging to proteobacteria), we can also filter the nodes in the network plot.\n\nsel <- names(phyla[phyla == \"Proteobacteria\"])\nsel <- sel[sel %in% colnames(net$adjaMat1)]\n\nplot(netprops,\n          nodeFilter = \"names\",\n     nodeFilterPar = sel,\n     repulsion = 0.95,\n     rmSingles = TRUE,\n     shortenLabels = \"none\",\n     labelScale = TRUE,\n     nodeSize = \"eigenvector\",\n     nodeSizeSpread = 3,\n     nodeColor = \"cluster\", \n     hubBorderCol = \"gray40\",\n     cexNodes = 1.8,\n     cexLabels = 3,\n     edgeTranspHigh = 20,\n     title1 = \"Sub-network for proteobacteria\", \n     showTitle = TRUE,\n     cexTitle = 2.3,\n     mar = c(1, 3, 4, 8))\n\nlegend(0.7, 1.1, cex = 1.7, title = \"estimated correlation:\",\n       legend = c(\"+\",\"-\"), lty = 1, lwd = 3, col = c(\"#009900\",\"red\"), \n       bty = \"n\", horiz = TRUE)"
  },
  {
    "objectID": "8_practical_networks.html#network-comparison-acidic-vs.-basic",
    "href": "8_practical_networks.html#network-comparison-acidic-vs.-basic",
    "title": "Practical applications of learned concepts in R",
    "section": "Network comparison (acidic vs. basic)",
    "text": "Network comparison (acidic vs. basic)\n\nNetwork construction\nNow, we might be interested in how the association networks differ between samples with a high and a low pH, or in other words, between basic and acidic samples.\n\n# Split the phyloseq object into two groups\nsoil_acid <- phyloseq::subset_samples(soil_renamed, ph < 6.7)\nsoil_basic <- phyloseq::subset_samples(soil_renamed, ph > 6.8)\n\nsoil_acid\n\nphyloseq-class experiment-level object\notu_table()   OTU Table:         [ 116 taxa and 59 samples ]\nsample_data() Sample Data:       [ 59 samples by 1 sample variables ]\ntax_table()   Taxonomy Table:    [ 116 taxa by 7 taxonomic ranks ]\n\nsoil_basic\n\nphyloseq-class experiment-level object\notu_table()   OTU Table:         [ 116 taxa and 30 samples ]\nsample_data() Sample Data:       [ 30 samples by 1 sample variables ]\ntax_table()   Taxonomy Table:    [ 116 taxa by 7 taxonomic ranks ]\n\n\n\nn_basic <- phyloseq::nsamples(soil_basic)\n\nWe filter the 30 samples (sample size of the smaller group) with highest frequency to make the sample sizes equal and thus ensure comparability.\n\nnet_groups <- netConstruct(data = soil_acid,\n                           data2 = soil_basic,\n                           taxRank = \"Genus\",\n                           filtSamp = \"highestFreq\",\n                           filtSampPar = list(highestFreq = n_basic),\n                           filtTax = \"totalReads\",\n                           filtTaxPar = list(totalReads = 1),\n                           measure = \"spieceasi\",\n                           measurePar = list(method = \"mb\",\n                                             pulsar.params = list(rep.num = 10)),\n                           zeroMethod = \"none\",\n                           normMethod = \"none\",\n                           sparsMethod = \"none\", \n                           dissFunc = \"signed\",\n                           verbose = 3,\n                           seed = 12345)\n\n\n\n\n\n\n\n\n\nNetwork analysis\nAll network measures are now computed for both networks.\n\nnetprops_groups <- netAnalyze(net_groups, \n                              centrLCC = TRUE,\n                              clustMethod = \"cluster_fast_greedy\",\n                              hubPar = \"eigenvector\",\n                              hubQuant = 0.95,\n                              weightDeg = FALSE,\n                              normDeg = FALSE,\n                              gcmHeat = FALSE)\n\n\n\nVisual comparison\nWe start with a visual comparison of the two networks using NetCoMi’s plot function.\n\nplot(netprops_groups,\n     repulsion = 0.96,\n     rmSingles = TRUE,\n     labelScale = FALSE,\n     nodeSize = \"eigenvector\",\n     nodeSizeSpread = 2,\n     nodeColor = \"cluster\", \n     sameColThresh = 2,\n     hubBorderCol = \"darkgray\",\n     cexNodes = 2,\n     edgeTranspHigh = 20,\n     title1 = \"Acidic\", \n     title2 = \"Basic\",\n     showTitle = TRUE,\n     cexTitle = 2,\n     cexLabels = 0.8,\n     mar = c(1, 4, 4, 4))\n\n# Overlay a transparent plot on which the legend is plotted\npar(fig=c(0, 1, 0, 1), oma=c(0, 0, 0, 0), mar=c(0, 0, 0, 0), new=TRUE)\nplot(0, 0, type='n', bty='n', xaxt='n', yaxt='n')\n\nlegend(-0.2, -0.9, cex = 1.5, title = \"estimated correlation:\",\n       legend = c(\"+\",\"-\"), lty = 1, lwd = 3, col = c(\"#009900\",\"red\"), \n       bty = \"n\", horiz = TRUE)\n\n\n\n\nLayout computed separately for each network -> difficult to visually compare certain associations\nWe now use the same layout in both groups.\n\nplot(netprops_groups,\n     sameLayout = TRUE,\n     layoutGroup = \"union\",\n     repulsion = 0.96,\n     rmSingles = \"inboth\",\n     labelScale = FALSE,\n     nodeSize = \"eigenvector\",\n     nodeSizeSpread = 2,\n     nodeColor = \"cluster\", \n     sameColThresh = 2,\n     hubBorderCol = \"darkgray\",\n     cexNodes = 2,\n     edgeTranspHigh = 20,\n     title1 = \"Acidic\", \n     title2 = \"Basic\",\n     showTitle = TRUE,\n     cexTitle = 2,\n     cexLabels = 0.8,\n     mar = c(1, 4, 4, 4))\n\n# Add legend\npar(fig=c(0, 1, 0, 1), oma=c(0, 0, 0, 0), mar=c(0, 0, 0, 0), new=TRUE)\nplot(0, 0, type='n', bty='n', xaxt='n', yaxt='n')\nlegend(-0.2, -0.8, cex = 1.7, title = \"estimated correlation:\",\n       legend = c(\"+\",\"-\"), lty = 1, lwd = 3, col = c(\"#009900\",\"red\"), \n       bty = \"n\", horiz = TRUE)\n\n\n\n\n\n\nQuantitative network comparison\n\nnetcomp <- netCompare(netprops_groups, \n                      permTest = FALSE,\n                      nPerm = 1000,\n                      cores = 6,\n                      seed = 12345,\n                      storeAssoPerm = TRUE,\n                      fileStoreAssoPerm = \"general/network_data/spring_assoPerm\",\n                      verbose = TRUE)\n\nChecking input arguments ... Done.\n\n\n\nsummary(netcomp, \n        groupNames = c(\"Acidic\", \"Basic\"),\n        numbNodes = 5)\n\n\nComparison of Network Properties\n----------------------------------\nCALL: \nnetCompare(x = netprops_groups, permTest = FALSE, verbose = TRUE, \n    nPerm = 1000, cores = 6, seed = 12345, storeAssoPerm = TRUE, \n    fileStoreAssoPerm = \"general/network_data/spring_assoPerm\")\n\n______________________________\nGlobal network properties\n`````````````````````````\nLargest connected component (LCC):\n                          Acidic   Basic    difference\nRelative LCC size          0.158   0.211         0.053\nClustering coefficient     0.262   0.000         0.262\nModularity                 0.465   0.527         0.061\nPositive edge percentage 100.000  86.667        13.333\nEdge density               0.182   0.125         0.057\nNatural connectivity       0.116   0.082         0.034\nVertex connectivity        1.000   1.000         0.000\nEdge connectivity          1.000   1.000         0.000\nAverage dissimilarity*     0.942   0.961         0.019\nAverage path length**      2.012   3.060         1.048\n\nWhole network:\n                         Acidic   Basic    difference\nNumber of components     43.000  47.000         4.000\nClustering coefficient    0.274   0.000         0.274\nModularity                0.848   0.809         0.039\nPositive edge percentage 86.111  93.103         6.992\nEdge density              0.013   0.010         0.002\nNatural connectivity      0.015   0.015         0.000\n-----\n *: Dissimilarity = 1 - edge weight\n**: Path length = Units with average dissimilarity\n\n______________________________\nJaccard index (similarity betw. sets of most central nodes)\n```````````````````````````````````````````````````````````\n                    Jacc   P(<=Jacc)     P(>=Jacc)   \ndegree             0.037    0.000255 ***  0.999982   \nbetweenness centr. 0.000    0.001522 **   1.000000   \ncloseness centr.   0.037    0.000255 ***  0.999982   \neigenvec. centr.   0.037    0.000255 ***  0.999982   \nhub taxa           0.000    0.039018 *    1.000000   \n-----\nJaccard index in [0,1] (1 indicates perfect agreement)\n\n______________________________\nAdjusted Rand index (similarity betw. clusterings)\n``````````````````````````````````````````````````\n        wholeNet       LCC\nARI       -0.014     0.154\np-value    0.813     0.026\n-----\nARI in [-1,1] with ARI=1: perfect agreement betw. clusterings\n                   ARI=0: expected for two random clusterings\np-value: permutation test (n=1000) with null hypothesis ARI=0\n\n______________________________\nGraphlet Correlation Distance\n`````````````````````````````\n    wholeNet       LCC\nGCD    1.788     3.159\n-----\nGCD >= 0 (GCD=0 indicates perfect agreement between GCMs)\n\n______________________________\nCentrality measures\n- In decreasing order\n- Centrality of disconnected components is zero\n````````````````````````````````````````````````\nDegree (unnormalized):\n                      Acidic Basic abs.diff.\n8_RB41(O)                  5     0         5\n66_Koribacteraceae(F)      0     4         4\n10_Ellin6513(O)            0     3         3\n17_RB41(O)                 0     3         3\n59_RB41(O)                 3     0         3\n\nBetweenness centrality (normalized):\n                      Acidic Basic abs.diff.\n8_RB41(O)                0.8 0.000     0.800\n66_Koribacteraceae(F)    0.0 0.657     0.657\n36_Ellin6513(O)          0.0 0.514     0.514\nRhodoplanes3             0.0 0.476     0.476\nEdaphobacter             0.0 0.476     0.476\n\nCloseness centrality (normalized):\n                      Acidic Basic abs.diff.\n8_RB41(O)              0.971 0.000     0.971\n59_RB41(O)             0.807 0.000     0.807\n1_Chitinophagaceae(F)  0.726 0.000     0.726\n9_RB41(O)              0.713 0.000     0.713\n66_Koribacteraceae(F)  0.000 0.692     0.692\n\nEigenvector centrality (normalized):\n                      Acidic Basic abs.diff.\n66_Koribacteraceae(F)  0.000 1.000     1.000\n8_RB41(O)              1.000 0.000     1.000\n36_Ellin6513(O)        0.000 0.719     0.719\nKaistobacter           0.577 0.000     0.577\nEdaphobacter           0.000 0.576     0.576\n\n_________________________________________________________\nSignificance codes: ***: 0.001, **: 0.01, *: 0.05, .: 0.1"
  },
  {
    "objectID": "4_eda_88soils.html",
    "href": "4_eda_88soils.html",
    "title": "Exploratory analysis of compositional data (part II)",
    "section": "",
    "text": "Here we use the “88 soils” data set (Lauber et al. 2009) containing bacterial communities in 88 soils from across North and South America.\n\n\n\nlibrary(phyloseq)\nlibrary(dplyr)\nlibrary(ggplot2)\n\nsoil <- readRDS(\"data/soil_processed/soil.RDS\")\n\nTake a look at the data\n\nsoil\n\nphyloseq-class experiment-level object\notu_table()   OTU Table:         [ 116 taxa and 89 samples ]\nsample_data() Sample Data:       [ 89 samples by 1 sample variables ]\ntax_table()   Taxonomy Table:    [ 116 taxa by 7 taxonomic ranks ]\n\n# Read count table\notu_table(soil)[1:10, 1:6]\n\nOTU Table:          [6 taxa and 10 samples]\n                     taxa are columns\n        1124701 697997 203969 205391 843189 3431064\n103.CA2      15      2      0      0      0       3\n103.CO3      14      4      0      0      0       1\n103.SR3       1      0      0      0      0       1\n103.IE2       8      0      0      1      0       0\n103.BP1      13     67      0      0      0       3\n103.VC2       7      0      0      1      0       7\n103.SA2       6      1      0      0      0       0\n103.GB2       3      3      0      0      0       0\n103.CO2       2      0      0      1      0       5\n103.KP1       2      1      0      0      0       1\n\n# Taxonomy table\ntaxtab <- tax_table(soil)\nhead(taxtab)\n\nTaxonomy Table:     [6 taxa by 7 taxonomic ranks]:\n        Kingdom       Phylum                Class                    \n1124701 \"k__Bacteria\" \"p__Bacteroidetes\"    \"c__[Saprospirae]\"       \n697997  \"k__Bacteria\" \"p__Acidobacteria\"    \"c__[Chloracidobacteria]\"\n203969  \"k__Bacteria\" \"p__Acidobacteria\"    \"c__DA052\"               \n205391  \"k__Bacteria\" \"p__Acidobacteria\"    \"c__Solibacteres\"        \n843189  \"k__Bacteria\" \"p__Acidobacteria\"    \"c__Solibacteres\"        \n3431064 \"k__Bacteria\" \"p__Gemmatimonadetes\" \"c__Gemmatimonadetes\"    \n        Order                Family                Genus                     \n1124701 \"o__[Saprospirales]\" \"f__Chitinophagaceae\" \"g__\"                     \n697997  \"o__RB41\"            \"f__\"                 \"g__\"                     \n203969  \"o__Ellin6513\"       \"f__\"                 \"g__\"                     \n205391  \"o__Solibacterales\"  \"f__\"                 \"g__\"                     \n843189  \"o__Solibacterales\"  \"f__Solibacteraceae\"  \"g__Candidatus Solibacter\"\n3431064 \"o__N1423WL\"         \"f__\"                 \"g__\"                     \n        Species\n1124701 \"s__\"  \n697997  \"s__\"  \n203969  \"s__\"  \n205391  \"s__\"  \n843189  \"s__\"  \n3431064 \"s__\"  \n\n# Sample data\nsampdata <- sample_data(soil)\nhead(sampdata)\n\n          ph\n103.CA2 8.02\n103.CO3 6.02\n103.SR3 6.95\n103.IE2 5.52\n103.BP1 7.53\n103.VC2 5.99\n\n\n\n\n\nWe first have a look at the microbial compositions on phylum level.\n\nsoil_phyla <- tax_glom(soil, taxrank = \"Phylum\")\n\nStacked bar plot of the observed “absolute” abundances:\n\nplot_bar(soil_phyla, fill = \"Phylum\")\n\n\n\n\nStacked bar plot of the relative abundances:\n\n# Compute relative abundances\notutab <- otu_table(soil_phyla)\notutab <- sweep(otutab, 1, FUN = `/`, rowSums(otutab))*100\nsoil_phyla@otu_table@.Data <- otutab\n\n\nplot_bar(soil_phyla, fill = \"Phylum\")\n\n\n\n\n\n\n\nDistance functions provided by the phyloseq package:\n\ndist_methods <- unlist(distanceMethodList)\ndist_methods\n\n    UniFrac1     UniFrac2        DPCoA          JSD     vegdist1     vegdist2 \n   \"unifrac\"   \"wunifrac\"      \"dpcoa\"        \"jsd\"  \"manhattan\"  \"euclidean\" \n    vegdist3     vegdist4     vegdist5     vegdist6     vegdist7     vegdist8 \n  \"canberra\"       \"bray\" \"kulczynski\"    \"jaccard\"      \"gower\"   \"altGower\" \n    vegdist9    vegdist10    vegdist11    vegdist12    vegdist13    vegdist14 \n  \"morisita\"       \"horn\"  \"mountford\"       \"raup\"   \"binomial\"       \"chao\" \n   vegdist15   betadiver1   betadiver2   betadiver3   betadiver4   betadiver5 \n       \"cao\"          \"w\"         \"-1\"          \"c\"         \"wb\"          \"r\" \n  betadiver6   betadiver7   betadiver8   betadiver9  betadiver10  betadiver11 \n         \"I\"          \"e\"          \"t\"         \"me\"          \"j\"        \"sor\" \n betadiver12  betadiver13  betadiver14  betadiver15  betadiver16  betadiver17 \n         \"m\"         \"-2\"         \"co\"         \"cc\"          \"g\"         \"-3\" \n betadiver18  betadiver19  betadiver20  betadiver21  betadiver22  betadiver23 \n         \"l\"         \"19\"         \"hk\"        \"rlb\"        \"sim\"         \"gl\" \n betadiver24        dist1        dist2        dist3   designdist \n         \"z\"    \"maximum\"     \"binary\"  \"minkowski\"        \"ANY\" \n\n\n\n\n\nsoil_mds <- ordinate(soil, method = \"MDS\", distance = \"bray\")\n\nFirst a plot without coloring metadata.\n\nmds_soil <- plot_ordination(soil, soil_mds, title = \"MDS of 88 soil data\")\n\nNo available covariate data to map on the points for this plot `type`\n\nmds_soil + theme_bw() + theme(text = element_text(size = 14)) + geom_point(size = 3)\n\n\n\n\nOne could identify two main clusters, separated by the first axis.\nWe now build two pH categories (acidic and basic) and color the samples in the MDS plot accordingly.\n\n# Add categorical variable to the data frame \nsampdata$ph_type <- as.factor(ifelse(sampdata$ph < 6.7, \"acid\", \"basic\")) \n\nhead(sampdata)\n\n          ph ph_type\n103.CA2 8.02   basic\n103.CO3 6.02    acid\n103.SR3 6.95   basic\n103.IE2 5.52    acid\n103.BP1 7.53   basic\n103.VC2 5.99    acid\n\ntable(sampdata$ph_type)\n\n\n acid basic \n   59    30 \n\n\nAdd the new data frame to the phyloseq object.\n\nsample_data(soil) <- sampdata\n\n\nmds_soil <- plot_ordination(soil, soil_mds, color = \"ph_type\",\n                            title = \"MDS of 88 soil data colored by pH type\")\n\nmds_soil + theme_bw() + theme(text = element_text(size = 14)) + geom_point(size = 3)\n\n\n\n\nIndeed, pH type separates samples along Axis.1.\n\n\n\nNow, we apply all available distance functions to the data, compute the corresponding MDS embeddings, and plot them.\nFirst, we have to remove the unwanted distances.\n\nfiltered_methods <- dist_methods[!dist_methods %in% c(\"unifrac\", \"wunifrac\",\n                                                      \"dpcoa\", \"ANY\", \"morisita\")]\n\nNow we can apply these distance metrics to our data.\n\ngather_ordination_data <- function(d_method, phylo_obj){\n  # Calculate the MDS matrix using the distance\n  ordinate_obj <- ordinate(phylo_obj, method = \"MDS\", distance = d_method)\n  # Get the data for plotting\n  plot_data <- plot_ordination(phylo_obj, ordinate_obj)$data\n  # Add a column for distance\n  plot_data$distance <- d_method\n  return(plot_data)\n}\n\nmds_plot_data <- bind_rows(lapply(filtered_methods, gather_ordination_data,\n                                  phylo_obj = soil))\n\nhead(mds_plot_data)\n\n                 Axis.1      Axis.2   ph ph_type distance\n103.CA2...1 -0.33574350  0.02953051 8.02   basic      jsd\n103.CO3...2 -0.20576435  0.14239745 6.02    acid      jsd\n103.SR3...3 -0.28628339 -0.06667131 6.95   basic      jsd\n103.IE2...4  0.08015191  0.14945431 5.52    acid      jsd\n103.BP1...5 -0.23519153  0.15304869 7.53   basic      jsd\n103.VC2...6 -0.05550672  0.23613823 5.99    acid      jsd\n\n\nWe color again according to pH type.\n\nmds_soil <- ggplot(mds_plot_data, aes(x=Axis.1, y=Axis.2, color=ph_type)) +\n  geom_point() +\n  facet_wrap(~ distance, scales = \"free\") +\n  labs(x=\"Axis.1\",\n       y=\"Axis.2\",\n       title=\"Separation of 88 soil samples according to different distances\")\n\nmds_soil + theme_bw() + theme(text = element_text(size = 12))"
  }
]