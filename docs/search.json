[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Mini-course compositional data analysis 2024",
    "section": "",
    "text": "Date: Jan 9-10 2024\nRoom: Location TBA\nInstructors: Christian L. Müller, Stefanie Peschel, Viet Tran\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome!\n\nThe goal of the workshop is to help participants understand and apply concepts of compositional data analysis\nWorkshop material can be found in the workshop github repository (TBA).\n\n\nLearning Objectives\nAt the end of the course, participants will be able to\n\nunderstand key concepts of compositional data analysis\napply concepts of compositional data analysis in R\n\n\n\nPre-requisites\n\nBasic familiarity with R (e.g., tutorial R for ecology)\n\n\n\n\nSchedule\nTuesday\n\n\n\n\n\n\n\n\nTime\nTopic\nPresenter\n\n\n\n\n9:00 - 10:00\nSession 1: Intro to compositional sequencing data\nInstructor CLM\n\n\n10:15 - 11:00\nPresentation of student data (fast track)\nall\n\n\n11:15 - 12:00\nSession 2: Principles of compositional data\nInstructor CLM\n\n\n12:00 - 13:00\nLunch break\nall\n\n\n13:00 - 14:00\nSession 3: Intro to compositional data analysis in R\nInstructor SP, VT\n\n\n14:15 - 15:15\nSession 4: Exploratory data analysis of compositional data\nInstructor CLM\n\n\n15:15 - 15:45\nFika\nall\n\n\n15:45 - 17:00\nSession 5: Differential abundance testing and regression\nInstructor CLM, VT\n\n\n17:00 - open end\nApplication to own data\nall\n\n\n\nWednesday\n\n\n\n\n\n\n\n\nTime\nTopic\nPresenter\n\n\n\n\n9:00 - 10:00\nRecap and open issues\nInstructor CLM\n\n\n10:15 - 11:00\nSession 6: Time series analysis for compositional data\nInstructor CLM\n\n\n11:15 - 12:00\nSession 7: Regression analysis for compositional data\nInstructor CLM, VT\n\n\n12:00 - 13:00\nLunch break\nall\n\n\n13:00 - 14:00\nSession 8: Network analysis\nInstructor CLM, SP\n\n\n14:15 - 15:15\nSession 9: Practical applications of learned concepts in R\nInstructor SP, VT\n\n\n15:15 - 15:45\nFika\nall\n\n\n15:45 - 16:15\nSession 10: Recap and further topics\nInstructor CLM\n\n\n16:15 - open end\nApplication to own data\nall\n\n\n\n\n\nAdditional material\n\nConstruct the soil phyloseq object\n\nWebsite created with the qtwAcademic template based on quarto."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "In the hands-on tutorial, we will use R.\n\nContact\nChristian L. Müller\nStefanie Peschel\nViet Tran: viet dot tran at campus.lmu.de"
  },
  {
    "objectID": "part_1_prep.html",
    "href": "part_1_prep.html",
    "title": "Preparation",
    "section": "",
    "text": "Page without code\n\n\n\nThis page contains an example for some structured preparation information for a workshop. No code is executed here.\nHere are some preparation information for the participants."
  },
  {
    "objectID": "part_1_prep.html#software",
    "href": "part_1_prep.html#software",
    "title": "Preparation",
    "section": "Software",
    "text": "Software\nIn this workshop we will be using R. You can either\n\nhave R and Rstudio installed on your laptop\nor, use Posit cloud (formerly Rstudio Cloud).\n\nPosit cloud is free of charge for personal users, yet you need to sign up for a new user account and have internet connection.\nThe R package we are using is glmnet."
  },
  {
    "objectID": "part_1_prep.html#data",
    "href": "part_1_prep.html#data",
    "title": "Preparation",
    "section": "Data",
    "text": "Data\nThe datasets we use can be found here (insert link)."
  },
  {
    "objectID": "part_1_prep.html#code",
    "href": "part_1_prep.html#code",
    "title": "Preparation",
    "section": "Code",
    "text": "Code\nThe R scripts used in part 1 and part 2 can be found here (insert link)."
  },
  {
    "objectID": "part_1_prep.html#resources",
    "href": "part_1_prep.html#resources",
    "title": "Preparation",
    "section": "Resources",
    "text": "Resources\nLecture notes (insert link)\nLab notes (insert link)"
  },
  {
    "objectID": "part_2_eda.html",
    "href": "part_2_eda.html",
    "title": "Part I",
    "section": "",
    "text": "Page with R code\n\n\n\nThis page contains an example template for a lab session, where R code and results are displayed here.\nYou can find more information on how to include code in Quarto website here.\nYou can experiment with code-fold and code-tools in the yaml header above to change how the code cells look like."
  },
  {
    "objectID": "part_2_eda.html#a-cancer-modeling-example",
    "href": "part_2_eda.html#a-cancer-modeling-example",
    "title": "Part I",
    "section": "A Cancer Modeling Example",
    "text": "A Cancer Modeling Example\nExercise on analysis of miRNA, mRNA and protein data from the paper Aure et al, Integrated analysis reveals microRNA networks coordinately expressed with key proteins in breast cancer, Genome Medicine, 2015.\nPlease run the code provided to replicate some of the analyses. Make sure you can explain what all the analysis steps do and that you understand all the results.\nIn addition, there are some extra tasks (Task 1), where no R code is provided. Please do these tasks when you have time available at the end of the lab.\n\nLoad the data\nRead the data, and convert to matrix format.\n\nmrna &lt;- read.table(\"data/data_example.txt\", header=T, sep=\"\\t\", dec=\".\")\n\n# Convert to matrix format\n\nmrna &lt;- as.matrix(mrna)\n\nPrint the data\n\nmrna[1:4, 1:4]\n\n      OSL2R.3002T4 OSL2R.3005T1 OSL2R.3013T1 OSL2R.3030T2\nACACA      1.60034     -0.49087     -0.26553     -0.27857\nANXA1     -2.42501     -0.05416     -0.46478     -2.18393\nAR         0.39615     -0.43348     -0.10232      0.58299\nBAK1       0.78627      0.39897      0.22598     -1.31202\n\n\nVisualise the overall distribution of expression levels by histogram\n\nhist(mrna, nclass=40, xlim=c(-5,5), col=\"lightblue\")\n\n\n\n\n\n\n\n\n\n\nTask 1\n\n\n\nThis is a callout-note, and it can be quite useful for exercises. You can find more about callout here.\nExample: Extend the above analysis to cover all genes."
  },
  {
    "objectID": "1_intro.html",
    "href": "1_intro.html",
    "title": "Intro to compositional sequencing data",
    "section": "",
    "text": "Page without code\n\n\n\nThis page contains an example for some structured preparation information for a workshop. No code is executed here.\nHere are some preparation information for the participants."
  },
  {
    "objectID": "1_intro.html#software",
    "href": "1_intro.html#software",
    "title": "Intro to compositional sequencing data",
    "section": "Software",
    "text": "Software\nIn this workshop we will be using R. You can either\n\nhave R and Rstudio installed on your laptop\nor, use Posit cloud (formerly Rstudio Cloud).\n\nPosit cloud is free of charge for personal users, yet you need to sign up for a new user account and have internet connection.\nThe R package we are using is glmnet."
  },
  {
    "objectID": "1_intro.html#data",
    "href": "1_intro.html#data",
    "title": "Intro to compositional sequencing data",
    "section": "Data",
    "text": "Data\nThe datasets we use can be found here (insert link)."
  },
  {
    "objectID": "1_intro.html#code",
    "href": "1_intro.html#code",
    "title": "Intro to compositional sequencing data",
    "section": "Code",
    "text": "Code\nThe R scripts used in part 1 and part 2 can be found here (insert link)."
  },
  {
    "objectID": "1_intro.html#resources",
    "href": "1_intro.html#resources",
    "title": "Intro to compositional sequencing data",
    "section": "Resources",
    "text": "Resources\nLecture notes (insert link)\nLab notes (insert link)"
  },
  {
    "objectID": "2_principle.html",
    "href": "2_principle.html",
    "title": "Principles of compositional data",
    "section": "",
    "text": "TBD\nPlease run the code provided to replicate some of the analyses. Make sure you can explain what all the analysis steps do and that you understand all the results.\nIn addition, there are some extra tasks (Task 1), where no R code is provided. Please do these tasks when you have time available at the end of the lab.\n\n\nRead the data, and convert to matrix format.\n\nmrna &lt;- read.table(\"data/data_example.txt\", header=T, sep=\"\\t\", dec=\".\")\n\n# Convert to matrix format\n\nmrna &lt;- as.matrix(mrna)\n\nPrint the data\n\nmrna[1:4, 1:4]\n\n      OSL2R.3002T4 OSL2R.3005T1 OSL2R.3013T1 OSL2R.3030T2\nACACA      1.60034     -0.49087     -0.26553     -0.27857\nANXA1     -2.42501     -0.05416     -0.46478     -2.18393\nAR         0.39615     -0.43348     -0.10232      0.58299\nBAK1       0.78627      0.39897      0.22598     -1.31202\n\n\nVisualize the overall distribution of expression levels by histogram\n\nhist(mrna, nclass=40, xlim=c(-5,5), col=\"lightblue\")\n\n\n\n\n\n\n\n\n\n\nTask 1\n\n\n\nThis is a callout-note, and it can be quite useful for exercises. You can find more about callout here.\nExample: Extend the above analysis to cover all genes."
  },
  {
    "objectID": "2_principle.html#a-cancer-modeling-example",
    "href": "2_principle.html#a-cancer-modeling-example",
    "title": "Principles of compositional data",
    "section": "A Cancer Modeling Example",
    "text": "A Cancer Modeling Example\nExercise on analysis of miRNA, mRNA and protein data from the paper Aure et al, Integrated analysis reveals microRNA networks coordinately expressed with key proteins in breast cancer, Genome Medicine, 2015.\nPlease run the code provided to replicate some of the analyses. Make sure you can explain what all the analysis steps do and that you understand all the results.\nIn addition, there are some extra tasks (Task 1), where no R code is provided. Please do these tasks when you have time available at the end of the lab.\n\nLoad the data\nRead the data, and convert to matrix format.\n\nmrna &lt;- read.table(\"data/data_example.txt\", header=T, sep=\"\\t\", dec=\".\")\n\n# Convert to matrix format\n\nmrna &lt;- as.matrix(mrna)\n\nPrint the data\n\nmrna[1:4, 1:4]\n\n      OSL2R.3002T4 OSL2R.3005T1 OSL2R.3013T1 OSL2R.3030T2\nACACA      1.60034     -0.49087     -0.26553     -0.27857\nANXA1     -2.42501     -0.05416     -0.46478     -2.18393\nAR         0.39615     -0.43348     -0.10232      0.58299\nBAK1       0.78627      0.39897      0.22598     -1.31202\n\n\nVisualise the overall distribution of expression levels by histogram\n\nhist(mrna, nclass=40, xlim=c(-5,5), col=\"lightblue\")\n\n\n\n\n\n\n\n\n\n\nTask 1\n\n\n\nThis is a callout-note, and it can be quite useful for exercises. You can find more about callout here.\nExample: Extend the above analysis to cover all genes."
  },
  {
    "objectID": "2_principle.html#example",
    "href": "2_principle.html#example",
    "title": "Principles of compositional data",
    "section": "",
    "text": "TBD\nPlease run the code provided to replicate some of the analyses. Make sure you can explain what all the analysis steps do and that you understand all the results.\nIn addition, there are some extra tasks (Task 1), where no R code is provided. Please do these tasks when you have time available at the end of the lab.\n\n\nRead the data, and convert to matrix format.\n\nmrna &lt;- read.table(\"data/data_example.txt\", header=T, sep=\"\\t\", dec=\".\")\n\n# Convert to matrix format\n\nmrna &lt;- as.matrix(mrna)\n\nPrint the data\n\nmrna[1:4, 1:4]\n\n      OSL2R.3002T4 OSL2R.3005T1 OSL2R.3013T1 OSL2R.3030T2\nACACA      1.60034     -0.49087     -0.26553     -0.27857\nANXA1     -2.42501     -0.05416     -0.46478     -2.18393\nAR         0.39615     -0.43348     -0.10232      0.58299\nBAK1       0.78627      0.39897      0.22598     -1.31202\n\n\nVisualize the overall distribution of expression levels by histogram\n\nhist(mrna, nclass=40, xlim=c(-5,5), col=\"lightblue\")\n\n\n\n\n\n\n\n\n\n\nTask 1\n\n\n\nThis is a callout-note, and it can be quite useful for exercises. You can find more about callout here.\nExample: Extend the above analysis to cover all genes."
  },
  {
    "objectID": "4_eda.html",
    "href": "4_eda.html",
    "title": "Exploratory data analysis of compositional data",
    "section": "",
    "text": "TBD\nPlease run the code provided to replicate some of the analyses. Make sure you can explain what all the analysis steps do and that you understand all the results.\nIn addition, there are some extra tasks (Task 1), where no R code is provided. Please do these tasks when you have time available at the end of the lab.\n\n\nRead the data, and convert to matrix format.\n\nmrna &lt;- read.table(\"data/data_example.txt\", header=T, sep=\"\\t\", dec=\".\")\n\n# Convert to matrix format\n\nmrna &lt;- as.matrix(mrna)\n\nPrint the data\n\nmrna[1:4, 1:4]\n\n      OSL2R.3002T4 OSL2R.3005T1 OSL2R.3013T1 OSL2R.3030T2\nACACA      1.60034     -0.49087     -0.26553     -0.27857\nANXA1     -2.42501     -0.05416     -0.46478     -2.18393\nAR         0.39615     -0.43348     -0.10232      0.58299\nBAK1       0.78627      0.39897      0.22598     -1.31202\n\n\nVisualize the overall distribution of expression levels by histogram\n\nhist(mrna, nclass=40, xlim=c(-5,5), col=\"lightblue\")\n\n\n\n\n\n\n\n\n\n\nTask 1\n\n\n\nThis is a callout-note, and it can be quite useful for exercises. You can find more about callout here.\nExample: Extend the above analysis to cover all genes."
  },
  {
    "objectID": "4_eda.html#example",
    "href": "4_eda.html#example",
    "title": "Exploratory data analysis of compositional data",
    "section": "",
    "text": "TBD\nPlease run the code provided to replicate some of the analyses. Make sure you can explain what all the analysis steps do and that you understand all the results.\nIn addition, there are some extra tasks (Task 1), where no R code is provided. Please do these tasks when you have time available at the end of the lab.\n\n\nRead the data, and convert to matrix format.\n\nmrna &lt;- read.table(\"data/data_example.txt\", header=T, sep=\"\\t\", dec=\".\")\n\n# Convert to matrix format\n\nmrna &lt;- as.matrix(mrna)\n\nPrint the data\n\nmrna[1:4, 1:4]\n\n      OSL2R.3002T4 OSL2R.3005T1 OSL2R.3013T1 OSL2R.3030T2\nACACA      1.60034     -0.49087     -0.26553     -0.27857\nANXA1     -2.42501     -0.05416     -0.46478     -2.18393\nAR         0.39615     -0.43348     -0.10232      0.58299\nBAK1       0.78627      0.39897      0.22598     -1.31202\n\n\nVisualize the overall distribution of expression levels by histogram\n\nhist(mrna, nclass=40, xlim=c(-5,5), col=\"lightblue\")\n\n\n\n\n\n\n\n\n\n\nTask 1\n\n\n\nThis is a callout-note, and it can be quite useful for exercises. You can find more about callout here.\nExample: Extend the above analysis to cover all genes."
  },
  {
    "objectID": "9_practical.html",
    "href": "9_practical.html",
    "title": "Practical applications of learned concepts in R",
    "section": "",
    "text": "TBD\nPlease run the code provided to replicate some of the analyses. Make sure you can explain what all the analysis steps do and that you understand all the results.\nIn addition, there are some extra tasks (Task 1), where no R code is provided. Please do these tasks when you have time available at the end of the lab.\n\n\nRead the data, and convert to matrix format.\n\nmrna &lt;- read.table(\"data/data_example.txt\", header=T, sep=\"\\t\", dec=\".\")\n\n# Convert to matrix format\n\nmrna &lt;- as.matrix(mrna)\n\nPrint the data\n\nmrna[1:4, 1:4]\n\n      OSL2R.3002T4 OSL2R.3005T1 OSL2R.3013T1 OSL2R.3030T2\nACACA      1.60034     -0.49087     -0.26553     -0.27857\nANXA1     -2.42501     -0.05416     -0.46478     -2.18393\nAR         0.39615     -0.43348     -0.10232      0.58299\nBAK1       0.78627      0.39897      0.22598     -1.31202\n\n\nVisualize the overall distribution of expression levels by histogram\n\nhist(mrna, nclass=40, xlim=c(-5,5), col=\"lightblue\")\n\n\n\n\n\n\n\n\n\n\nTask 1\n\n\n\nThis is a callout-note, and it can be quite useful for exercises. You can find more about callout here.\nExample: Extend the above analysis to cover all genes."
  },
  {
    "objectID": "9_practical.html#example",
    "href": "9_practical.html#example",
    "title": "Practical applications of learned concepts in R",
    "section": "",
    "text": "TBD\nPlease run the code provided to replicate some of the analyses. Make sure you can explain what all the analysis steps do and that you understand all the results.\nIn addition, there are some extra tasks (Task 1), where no R code is provided. Please do these tasks when you have time available at the end of the lab.\n\n\nRead the data, and convert to matrix format.\n\nmrna &lt;- read.table(\"data/data_example.txt\", header=T, sep=\"\\t\", dec=\".\")\n\n# Convert to matrix format\n\nmrna &lt;- as.matrix(mrna)\n\nPrint the data\n\nmrna[1:4, 1:4]\n\n      OSL2R.3002T4 OSL2R.3005T1 OSL2R.3013T1 OSL2R.3030T2\nACACA      1.60034     -0.49087     -0.26553     -0.27857\nANXA1     -2.42501     -0.05416     -0.46478     -2.18393\nAR         0.39615     -0.43348     -0.10232      0.58299\nBAK1       0.78627      0.39897      0.22598     -1.31202\n\n\nVisualize the overall distribution of expression levels by histogram\n\nhist(mrna, nclass=40, xlim=c(-5,5), col=\"lightblue\")\n\n\n\n\n\n\n\n\n\n\nTask 1\n\n\n\nThis is a callout-note, and it can be quite useful for exercises. You can find more about callout here.\nExample: Extend the above analysis to cover all genes."
  },
  {
    "objectID": "90_soil_phyloseq.html",
    "href": "90_soil_phyloseq.html",
    "title": "Practical applications of learned concepts in R",
    "section": "",
    "text": "Here, we show how to construct the phyloseq object based on the taxonomic table, the ASV table, and the metadata. We use the 88 soil dataset (Lauber et al. 2009) obtained from the gglasso (Schaipp, Vlasovets, and Müller 2021) tutorial. The raw data can be downloaded from the GitHub repositories. According the to tutorial the data is already processed in the following way:\n\nFilter for OTUs with minimum abundance of \\(100\\) and\nadd pseudo-count of \\(1\\).\n\nData sources:\n\nTaxonomy: https://github.com/Vlasovets/GGLasso/blob/cfbf01535c88bbcd3ba60f24b5b867472d549f89/data/soil/original/88soils_taxonomy.txt\nOTU table: https://github.com/Vlasovets/GGLasso/blob/master/data/soil/processed/soil_116.csv\nMetadata: https://github.com/Vlasovets/GGLasso/blob/master/data/soil/processed/ph.csv\n\nA detailed tutorial on constructing a phyloseq object can be found on the official phyloseq website.\nWe will need 2 packages for analysis:\n\nphyloseq for the data structure and\ntidyverse for data wranging.\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.1     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(phyloseq)\n\n\n\nRead the different data tables.\n\n# The OTU table contains rownames in the column X\notu_raw &lt;- read.csv(\"./data/soil_raw/soil_116.csv\", header = TRUE, row.names = \"X\")\ntax_raw &lt;- read.table(\"./data/soil_raw/88soils_taxonomy.txt\", \n                      header = TRUE, sep = \"\\t\")\n# The ph data also contains rownames in X.SampleID\nph &lt;- read.csv(\"./data/soil_raw/ph.csv\", header = TRUE, row.names = \"X.SampleID\")\n\nPrint the data.\n\nhead(otu_raw[, 1:6])\n\n        X1124701 X697997 X203969 X205391 X843189 X3431064\n103.CA2       16       3       1       1       1        4\n103.CO3       15       5       1       1       1        2\n103.SR3        2       1       1       1       1        2\n103.IE2        9       1       1       2       1        1\n103.BP1       14      68       1       1       1        4\n103.VC2        8       1       1       2       1        8\n\n\nThe OTU data looks good, but we must fix the column names since they start with X.\n\nhead(tax_raw)\n\n  Feature.ID\n1    1000512\n2    1000547\n3    1000654\n4    1000757\n5    1000876\n6    1001333\n                                                                                                      Taxon\n1                     k__Bacteria;p__Actinobacteria;c__Thermoleophilia;o__Gaiellales;f__Gaiellaceae;g__;s__\n2          k__Bacteria;p__Firmicutes;c__Bacilli;o__Lactobacillales;f__Streptococcaceae;g__Streptococcus;s__\n3     k__Bacteria;p__Bacteroidetes;c__Sphingobacteriia;o__Sphingobacteriales;f__Sphingobacteriaceae;g__;s__\n4          k__Bacteria;p__Proteobacteria;c__Alphaproteobacteria;o__Rhizobiales;f__Bradyrhizobiaceae;g__;s__\n5 k__Bacteria;p__Actinobacteria;c__Actinobacteria;o__Actinomycetales;f__Nocardioidaceae;g__Nocardioides;s__\n6                       k__Bacteria;p__Acidobacteria;c__Holophagae;o__Holophagales;f__Holophagaceae;g__;s__\n\ndim(tax_raw)\n\n[1] 7396    2\n\n\nThe taxonomic information is for the unfiltered OTUs; therefore, we need to filter this file as well. We also need to divide the data frame into seven taxonomic levels instead of one string for phyloseq.\n\nhead(ph)\n\n          ph\n103.BZ1 5.12\n103.CR1 8.00\n103.GB2 7.57\n103.GB3 7.18\n103.GB1 6.84\n103.GB5 8.22\n\n\nThis data frame looks fine.\n\n\n\nRemove the X in the column name so they match with the taxonomy data.\n\ncolnames(otu_raw) &lt;- str_remove_all(colnames(otu_raw), pattern = \"X\")\n\nFilter the taxonomic information and split the data into the different taxonomic ranks.\n\ntax_raw &lt;- tax_raw %&gt;%\n  filter(Feature.ID %in% colnames(otu_raw))\n\n# Sanity check: do the dimensions match? 116 Taxonomic assignments\n# and 116 OTUs.\ndim(tax_raw)\n\n[1] 116   2\n\ndim(otu_raw)\n\n[1]  89 116\n\n\n\ntaxonomic_ranks &lt;-\n  c(\"Kingdom\", \"Phylum\", \"Class\", \"Order\",\n    \"Family\", \"Genus\", \"Species\")\n\ntax_raw &lt;- tax_raw %&gt;%\n  separate_wider_delim(., cols = \"Taxon\",\n                       delim = \";\", names = taxonomic_ranks)\n\n# Phyloseq needs the OTU ids as rownames\ntax_raw &lt;- tax_raw %&gt;%\n  column_to_rownames(\"Feature.ID\")\n\n\n\n\nWe need the otu table and taxonomic table in matrix form to construct the phylo object. Also, we need to remove the pseudo-count of 1\n\n# remove pseudo-count of 1\notu_raw &lt;- otu_raw - 1\n# transform to matrix\notu &lt;- as.matrix(otu_raw)\ntax &lt;- as.matrix(tax_raw)\n\nConstruct the objects for the final phyloseq object\n\n# We have taxa in the columns so we need to specifiy this\notu &lt;- otu_table(otu, taxa_are_rows = FALSE)\ntax &lt;- tax_table(tax)\nsample_df &lt;- sample_data(ph)\n\nCombine everything in the phylo object.\n\nsoil &lt;- phyloseq(otu, tax, sample_df)\n\nFinally, save the data.\n\nsaveRDS(soil, file = \"./data/soil_processed/soil.RDS\")"
  },
  {
    "objectID": "90_soil_phyloseq.html#construct-a-phyloseq-object",
    "href": "90_soil_phyloseq.html#construct-a-phyloseq-object",
    "title": "Practical applications of learned concepts in R",
    "section": "",
    "text": "Here, we show how to construct the phyloseq object based on the taxonomic table, the ASV table, and the metadata. We use the 88 soil dataset (Lauber et al. 2009) obtained from the gglasso (Schaipp, Vlasovets, and Müller 2021) tutorial. The raw data can be downloaded from the GitHub repositories. According the to tutorial the data is already processed in the following way:\n\nFilter for OTUs with minimum abundance of \\(100\\) and\nadd pseudo-count of \\(1\\).\n\nData sources:\n\nTaxonomy: https://github.com/Vlasovets/GGLasso/blob/cfbf01535c88bbcd3ba60f24b5b867472d549f89/data/soil/original/88soils_taxonomy.txt\nOTU table: https://github.com/Vlasovets/GGLasso/blob/master/data/soil/processed/soil_116.csv\nMetadata: https://github.com/Vlasovets/GGLasso/blob/master/data/soil/processed/ph.csv\n\nA detailed tutorial on constructing a phyloseq object can be found on the official phyloseq website.\nWe will need 2 packages for analysis:\n\nphyloseq for the data structure and\ntidyverse for data wranging.\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.1     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(phyloseq)\n\n\n\nRead the different data tables.\n\n# The OTU table contains rownames in the column X\notu_raw &lt;- read.csv(\"./data/soil_raw/soil_116.csv\", header = TRUE, row.names = \"X\")\ntax_raw &lt;- read.table(\"./data/soil_raw/88soils_taxonomy.txt\", \n                      header = TRUE, sep = \"\\t\")\n# The ph data also contains rownames in X.SampleID\nph &lt;- read.csv(\"./data/soil_raw/ph.csv\", header = TRUE, row.names = \"X.SampleID\")\n\nPrint the data.\n\nhead(otu_raw[, 1:6])\n\n        X1124701 X697997 X203969 X205391 X843189 X3431064\n103.CA2       16       3       1       1       1        4\n103.CO3       15       5       1       1       1        2\n103.SR3        2       1       1       1       1        2\n103.IE2        9       1       1       2       1        1\n103.BP1       14      68       1       1       1        4\n103.VC2        8       1       1       2       1        8\n\n\nThe OTU data looks good, but we must fix the column names since they start with X.\n\nhead(tax_raw)\n\n  Feature.ID\n1    1000512\n2    1000547\n3    1000654\n4    1000757\n5    1000876\n6    1001333\n                                                                                                      Taxon\n1                     k__Bacteria;p__Actinobacteria;c__Thermoleophilia;o__Gaiellales;f__Gaiellaceae;g__;s__\n2          k__Bacteria;p__Firmicutes;c__Bacilli;o__Lactobacillales;f__Streptococcaceae;g__Streptococcus;s__\n3     k__Bacteria;p__Bacteroidetes;c__Sphingobacteriia;o__Sphingobacteriales;f__Sphingobacteriaceae;g__;s__\n4          k__Bacteria;p__Proteobacteria;c__Alphaproteobacteria;o__Rhizobiales;f__Bradyrhizobiaceae;g__;s__\n5 k__Bacteria;p__Actinobacteria;c__Actinobacteria;o__Actinomycetales;f__Nocardioidaceae;g__Nocardioides;s__\n6                       k__Bacteria;p__Acidobacteria;c__Holophagae;o__Holophagales;f__Holophagaceae;g__;s__\n\ndim(tax_raw)\n\n[1] 7396    2\n\n\nThe taxonomic information is for the unfiltered OTUs; therefore, we need to filter this file as well. We also need to divide the data frame into seven taxonomic levels instead of one string for phyloseq.\n\nhead(ph)\n\n          ph\n103.BZ1 5.12\n103.CR1 8.00\n103.GB2 7.57\n103.GB3 7.18\n103.GB1 6.84\n103.GB5 8.22\n\n\nThis data frame looks fine.\n\n\n\nRemove the X in the column name so they match with the taxonomy data.\n\ncolnames(otu_raw) &lt;- str_remove_all(colnames(otu_raw), pattern = \"X\")\n\nFilter the taxonomic information and split the data into the different taxonomic ranks.\n\ntax_raw &lt;- tax_raw %&gt;%\n  filter(Feature.ID %in% colnames(otu_raw))\n\n# Sanity check: do the dimensions match? 116 Taxonomic assignments\n# and 116 OTUs.\ndim(tax_raw)\n\n[1] 116   2\n\ndim(otu_raw)\n\n[1]  89 116\n\n\n\ntaxonomic_ranks &lt;-\n  c(\"Kingdom\", \"Phylum\", \"Class\", \"Order\",\n    \"Family\", \"Genus\", \"Species\")\n\ntax_raw &lt;- tax_raw %&gt;%\n  separate_wider_delim(., cols = \"Taxon\",\n                       delim = \";\", names = taxonomic_ranks)\n\n# Phyloseq needs the OTU ids as rownames\ntax_raw &lt;- tax_raw %&gt;%\n  column_to_rownames(\"Feature.ID\")\n\n\n\n\nWe need the otu table and taxonomic table in matrix form to construct the phylo object. Also, we need to remove the pseudo-count of 1\n\n# remove pseudo-count of 1\notu_raw &lt;- otu_raw - 1\n# transform to matrix\notu &lt;- as.matrix(otu_raw)\ntax &lt;- as.matrix(tax_raw)\n\nConstruct the objects for the final phyloseq object\n\n# We have taxa in the columns so we need to specifiy this\notu &lt;- otu_table(otu, taxa_are_rows = FALSE)\ntax &lt;- tax_table(tax)\nsample_df &lt;- sample_data(ph)\n\nCombine everything in the phylo object.\n\nsoil &lt;- phyloseq(otu, tax, sample_df)\n\nFinally, save the data.\n\nsaveRDS(soil, file = \"./data/soil_processed/soil.RDS\")"
  },
  {
    "objectID": "90_soil_phyloseq.html#computational-environment",
    "href": "90_soil_phyloseq.html#computational-environment",
    "title": "Practical applications of learned concepts in R",
    "section": "Computational environment",
    "text": "Computational environment\n\nsessionInfo()\n\nR version 4.2.3 (2023-03-15 ucrt)\nPlatform: x86_64-w64-mingw32/x64 (64-bit)\nRunning under: Windows 10 x64 (build 19045)\n\nMatrix products: default\n\nlocale:\n[1] LC_COLLATE=English_Germany.utf8  LC_CTYPE=English_Germany.utf8   \n[3] LC_MONETARY=English_Germany.utf8 LC_NUMERIC=C                    \n[5] LC_TIME=English_Germany.utf8    \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] phyloseq_1.40.0 lubridate_1.9.2 forcats_1.0.0   stringr_1.5.0  \n [5] dplyr_1.1.1     purrr_1.0.1     readr_2.1.4     tidyr_1.3.0    \n [9] tibble_3.2.1    ggplot2_3.4.1   tidyverse_2.0.0\n\nloaded via a namespace (and not attached):\n [1] Biobase_2.56.0         jsonlite_1.8.4         splines_4.2.3         \n [4] foreach_1.5.2          stats4_4.2.3           GenomeInfoDbData_1.2.8\n [7] yaml_2.3.7             pillar_1.9.0           lattice_0.20-45       \n[10] glue_1.6.2             digest_0.6.31          XVector_0.36.0        \n[13] colorspace_2.1-0       htmltools_0.5.5        Matrix_1.5-3          \n[16] plyr_1.8.8             pkgconfig_2.0.3        zlibbioc_1.42.0       \n[19] scales_1.2.1           tzdb_0.3.0             timechange_0.2.0      \n[22] mgcv_1.8-42            generics_0.1.3         IRanges_2.30.0        \n[25] withr_2.5.0            BiocGenerics_0.42.0    cli_3.6.1             \n[28] survival_3.5-3         magrittr_2.0.3         crayon_1.5.2          \n[31] evaluate_0.20          fansi_1.0.4            nlme_3.1-162          \n[34] MASS_7.3-58.2          vegan_2.6-4            tools_4.2.3           \n[37] data.table_1.14.8      hms_1.1.3              lifecycle_1.0.3       \n[40] Rhdf5lib_1.18.2        S4Vectors_0.34.0       munsell_0.5.0         \n[43] cluster_2.1.4          Biostrings_2.64.0      ade4_1.7-22           \n[46] compiler_4.2.3         GenomeInfoDb_1.32.2    rlang_1.1.0           \n[49] rhdf5_2.40.0           grid_4.2.3             RCurl_1.98-1.12       \n[52] iterators_1.0.14       rhdf5filters_1.8.0     biomformat_1.24.0     \n[55] rstudioapi_0.14        htmlwidgets_1.6.2      igraph_1.4.1          \n[58] bitops_1.0-7           rmarkdown_2.21         gtable_0.3.3          \n[61] codetools_0.2-19       multtest_2.52.0        DBI_1.1.3             \n[64] reshape2_1.4.4         R6_2.5.1               knitr_1.42            \n[67] fastmap_1.1.1          utf8_1.2.3             permute_0.9-7         \n[70] ape_5.7-1              stringi_1.7.12         parallel_4.2.3        \n[73] Rcpp_1.0.10            vctrs_0.6.1            tidyselect_1.2.0      \n[76] xfun_0.38"
  }
]